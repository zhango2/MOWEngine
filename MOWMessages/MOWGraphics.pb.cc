// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MOWGraphics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MOWGraphics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PbMOWGraphics {

namespace {

const ::google::protobuf::Descriptor* PbMOWLight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbMOWLight_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PbMOWLight_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PbMOWVertex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbMOWVertex_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbMOWFace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbMOWFace_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbMOWModelPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbMOWModelPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbMOWBoundingSphere_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbMOWBoundingSphere_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbMOWBoundingBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbMOWBoundingBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbMOWModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbMOWModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbMOWScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbMOWScene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PbMOWBoundingShape_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MOWGraphics_2eproto() {
  protobuf_AddDesc_MOWGraphics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MOWGraphics.proto");
  GOOGLE_CHECK(file != NULL);
  PbMOWLight_descriptor_ = file->message_type(0);
  static const int PbMOWLight_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWLight, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWLight, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWLight, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWLight, ambientcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWLight, diffusecolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWLight, specularcolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWLight, attenuation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWLight, hasposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWLight, model_),
  };
  PbMOWLight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbMOWLight_descriptor_,
      PbMOWLight::default_instance_,
      PbMOWLight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWLight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWLight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbMOWLight));
  PbMOWLight_Type_descriptor_ = PbMOWLight_descriptor_->enum_type(0);
  PbMOWVertex_descriptor_ = file->message_type(1);
  static const int PbMOWVertex_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWVertex, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWVertex, texture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWVertex, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWVertex, color_),
  };
  PbMOWVertex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbMOWVertex_descriptor_,
      PbMOWVertex::default_instance_,
      PbMOWVertex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWVertex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWVertex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbMOWVertex));
  PbMOWFace_descriptor_ = file->message_type(2);
  static const int PbMOWFace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWFace, indices_),
  };
  PbMOWFace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbMOWFace_descriptor_,
      PbMOWFace::default_instance_,
      PbMOWFace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWFace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWFace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbMOWFace));
  PbMOWModelPart_descriptor_ = file->message_type(3);
  static const int PbMOWModelPart_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModelPart, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModelPart, faces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModelPart, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModelPart, materialname_),
  };
  PbMOWModelPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbMOWModelPart_descriptor_,
      PbMOWModelPart::default_instance_,
      PbMOWModelPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModelPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModelPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbMOWModelPart));
  PbMOWBoundingSphere_descriptor_ = file->message_type(4);
  static const int PbMOWBoundingSphere_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWBoundingSphere, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWBoundingSphere, radius_),
  };
  PbMOWBoundingSphere_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbMOWBoundingSphere_descriptor_,
      PbMOWBoundingSphere::default_instance_,
      PbMOWBoundingSphere_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWBoundingSphere, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWBoundingSphere, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbMOWBoundingSphere));
  PbMOWBoundingBox_descriptor_ = file->message_type(5);
  static const int PbMOWBoundingBox_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWBoundingBox, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWBoundingBox, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWBoundingBox, widthheightdepth_),
  };
  PbMOWBoundingBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbMOWBoundingBox_descriptor_,
      PbMOWBoundingBox::default_instance_,
      PbMOWBoundingBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWBoundingBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWBoundingBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbMOWBoundingBox));
  PbMOWModel_descriptor_ = file->message_type(6);
  static const int PbMOWModel_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModel, parts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModel, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModel, boundingshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModel, boundingbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModel, boundingsphere_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModel, physicalentity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModel, scale_),
  };
  PbMOWModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbMOWModel_descriptor_,
      PbMOWModel::default_instance_,
      PbMOWModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbMOWModel));
  PbMOWScene_descriptor_ = file->message_type(7);
  static const int PbMOWScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWScene, fixedmodels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWScene, dynamicmodels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWScene, cameras_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWScene, lights_),
  };
  PbMOWScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbMOWScene_descriptor_,
      PbMOWScene::default_instance_,
      PbMOWScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbMOWScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbMOWScene));
  PbMOWBoundingShape_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MOWGraphics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbMOWLight_descriptor_, &PbMOWLight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbMOWVertex_descriptor_, &PbMOWVertex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbMOWFace_descriptor_, &PbMOWFace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbMOWModelPart_descriptor_, &PbMOWModelPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbMOWBoundingSphere_descriptor_, &PbMOWBoundingSphere::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbMOWBoundingBox_descriptor_, &PbMOWBoundingBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbMOWModel_descriptor_, &PbMOWModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbMOWScene_descriptor_, &PbMOWScene::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MOWGraphics_2eproto() {
  delete PbMOWLight::default_instance_;
  delete PbMOWLight_reflection_;
  delete PbMOWVertex::default_instance_;
  delete PbMOWVertex_reflection_;
  delete PbMOWFace::default_instance_;
  delete PbMOWFace_reflection_;
  delete PbMOWModelPart::default_instance_;
  delete PbMOWModelPart_reflection_;
  delete PbMOWBoundingSphere::default_instance_;
  delete PbMOWBoundingSphere_reflection_;
  delete PbMOWBoundingBox::default_instance_;
  delete PbMOWBoundingBox_reflection_;
  delete PbMOWModel::default_instance_;
  delete PbMOWModel_reflection_;
  delete PbMOWScene::default_instance_;
  delete PbMOWScene_reflection_;
}

void protobuf_AddDesc_MOWGraphics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PbMOWCommon::protobuf_AddDesc_MOWCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021MOWGraphics.proto\022\rPbMOWGraphics\032\017MOWC"
    "ommon.proto\"\261\003\n\nPbMOWLight\022,\n\004type\030\001 \001(\016"
    "2\036.PbMOWGraphics.PbMOWLight.Type\022\014\n\004name"
    "\030\002 \001(\t\022,\n\tdirection\030\003 \001(\0132\031.PbMOWCommon."
    "PbMOWVector3\022/\n\014ambientColor\030\004 \001(\0132\031.PbM"
    "OWCommon.PbMOWVector4\022/\n\014diffuseColor\030\005 "
    "\001(\0132\031.PbMOWCommon.PbMOWVector4\0220\n\rspecul"
    "arColor\030\006 \001(\0132\031.PbMOWCommon.PbMOWVector4"
    "\022.\n\013attenuation\030\007 \001(\0132\031.PbMOWCommon.PbMO"
    "WVector3\022\023\n\013hasPosition\030\010 \001(\010\022(\n\005model\030\t"
    " \001(\0132\031.PbMOWGraphics.PbMOWModel\"6\n\004Type\022"
    "\010\n\004NONE\020\000\022\017\n\013DIRECTIONAL\020\001\022\t\n\005POINT\020\002\022\010\n"
    "\004SPOT\020\003\"\273\001\n\013PbMOWVertex\022+\n\010position\030\001 \001("
    "\0132\031.PbMOWCommon.PbMOWVector3\022*\n\007texture\030"
    "\002 \001(\0132\031.PbMOWCommon.PbMOWVector3\022)\n\006norm"
    "al\030\003 \001(\0132\031.PbMOWCommon.PbMOWVector3\022(\n\005c"
    "olor\030\004 \001(\0132\031.PbMOWCommon.PbMOWVector4\"\034\n"
    "\tPbMOWFace\022\017\n\007indices\030\001 \003(\005\"\213\001\n\016PbMOWMod"
    "elPart\022,\n\010vertices\030\001 \003(\0132\032.PbMOWGraphics"
    ".PbMOWVertex\022\'\n\005faces\030\002 \003(\0132\030.PbMOWGraph"
    "ics.PbMOWFace\022\014\n\004name\030\003 \001(\t\022\024\n\014materialN"
    "ame\030\004 \001(\t\"P\n\023PbMOWBoundingSphere\022)\n\006cent"
    "er\030\001 \001(\0132\031.PbMOWCommon.PbMOWVector3\022\016\n\006r"
    "adius\030\002 \001(\002\"\202\001\n\020PbMOWBoundingBox\022\014\n\004name"
    "\030\001 \001(\t\022+\n\004part\030\002 \001(\0132\035.PbMOWGraphics.PbM"
    "OWModelPart\0223\n\020widthHeightDepth\030\003 \001(\0132\031."
    "PbMOWCommon.PbMOWVector3\"\266\002\n\nPbMOWModel\022"
    ",\n\005parts\030\001 \003(\0132\035.PbMOWGraphics.PbMOWMode"
    "lPart\022\014\n\004name\030\002 \001(\t\0228\n\rboundingShape\030\003 \001"
    "(\0162!.PbMOWGraphics.PbMOWBoundingShape\0224\n"
    "\013boundingBox\030\004 \001(\0132\037.PbMOWGraphics.PbMOW"
    "BoundingBox\022:\n\016boundingSphere\030\005 \001(\0132\".Pb"
    "MOWGraphics.PbMOWBoundingSphere\022\026\n\016physi"
    "calEntity\030\006 \001(\014\022(\n\005scale\030\007 \001(\0132\031.PbMOWCo"
    "mmon.PbMOWVector3\"\305\001\n\nPbMOWScene\022.\n\013fixe"
    "dModels\030\001 \003(\0132\031.PbMOWGraphics.PbMOWModel"
    "\0220\n\rdynamicModels\030\002 \003(\0132\031.PbMOWGraphics."
    "PbMOWModel\022*\n\007cameras\030\003 \003(\0132\031.PbMOWGraph"
    "ics.PbMOWModel\022)\n\006lights\030\004 \003(\0132\031.PbMOWGr"
    "aphics.PbMOWLight*F\n\022PbMOWBoundingShape\022"
    "\r\n\tPMBS_NONE\020\000\022\014\n\010PMBS_BOX\020\001\022\017\n\013PMBS_SPH"
    "ERE\020\002\032\002\020\001", 1649);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MOWGraphics.proto", &protobuf_RegisterTypes);
  PbMOWLight::default_instance_ = new PbMOWLight();
  PbMOWVertex::default_instance_ = new PbMOWVertex();
  PbMOWFace::default_instance_ = new PbMOWFace();
  PbMOWModelPart::default_instance_ = new PbMOWModelPart();
  PbMOWBoundingSphere::default_instance_ = new PbMOWBoundingSphere();
  PbMOWBoundingBox::default_instance_ = new PbMOWBoundingBox();
  PbMOWModel::default_instance_ = new PbMOWModel();
  PbMOWScene::default_instance_ = new PbMOWScene();
  PbMOWLight::default_instance_->InitAsDefaultInstance();
  PbMOWVertex::default_instance_->InitAsDefaultInstance();
  PbMOWFace::default_instance_->InitAsDefaultInstance();
  PbMOWModelPart::default_instance_->InitAsDefaultInstance();
  PbMOWBoundingSphere::default_instance_->InitAsDefaultInstance();
  PbMOWBoundingBox::default_instance_->InitAsDefaultInstance();
  PbMOWModel::default_instance_->InitAsDefaultInstance();
  PbMOWScene::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MOWGraphics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MOWGraphics_2eproto {
  StaticDescriptorInitializer_MOWGraphics_2eproto() {
    protobuf_AddDesc_MOWGraphics_2eproto();
  }
} static_descriptor_initializer_MOWGraphics_2eproto_;
const ::google::protobuf::EnumDescriptor* PbMOWBoundingShape_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMOWBoundingShape_descriptor_;
}
bool PbMOWBoundingShape_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PbMOWLight_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMOWLight_Type_descriptor_;
}
bool PbMOWLight_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PbMOWLight_Type PbMOWLight::NONE;
const PbMOWLight_Type PbMOWLight::DIRECTIONAL;
const PbMOWLight_Type PbMOWLight::POINT;
const PbMOWLight_Type PbMOWLight::SPOT;
const PbMOWLight_Type PbMOWLight::Type_MIN;
const PbMOWLight_Type PbMOWLight::Type_MAX;
const int PbMOWLight::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PbMOWLight::kTypeFieldNumber;
const int PbMOWLight::kNameFieldNumber;
const int PbMOWLight::kDirectionFieldNumber;
const int PbMOWLight::kAmbientColorFieldNumber;
const int PbMOWLight::kDiffuseColorFieldNumber;
const int PbMOWLight::kSpecularColorFieldNumber;
const int PbMOWLight::kAttenuationFieldNumber;
const int PbMOWLight::kHasPositionFieldNumber;
const int PbMOWLight::kModelFieldNumber;
#endif  // !_MSC_VER

PbMOWLight::PbMOWLight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbMOWGraphics.PbMOWLight)
}

void PbMOWLight::InitAsDefaultInstance() {
  direction_ = const_cast< ::PbMOWCommon::PbMOWVector3*>(&::PbMOWCommon::PbMOWVector3::default_instance());
  ambientcolor_ = const_cast< ::PbMOWCommon::PbMOWVector4*>(&::PbMOWCommon::PbMOWVector4::default_instance());
  diffusecolor_ = const_cast< ::PbMOWCommon::PbMOWVector4*>(&::PbMOWCommon::PbMOWVector4::default_instance());
  specularcolor_ = const_cast< ::PbMOWCommon::PbMOWVector4*>(&::PbMOWCommon::PbMOWVector4::default_instance());
  attenuation_ = const_cast< ::PbMOWCommon::PbMOWVector3*>(&::PbMOWCommon::PbMOWVector3::default_instance());
  model_ = const_cast< ::PbMOWGraphics::PbMOWModel*>(&::PbMOWGraphics::PbMOWModel::default_instance());
}

PbMOWLight::PbMOWLight(const PbMOWLight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbMOWGraphics.PbMOWLight)
}

void PbMOWLight::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = NULL;
  ambientcolor_ = NULL;
  diffusecolor_ = NULL;
  specularcolor_ = NULL;
  attenuation_ = NULL;
  hasposition_ = false;
  model_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbMOWLight::~PbMOWLight() {
  // @@protoc_insertion_point(destructor:PbMOWGraphics.PbMOWLight)
  SharedDtor();
}

void PbMOWLight::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete direction_;
    delete ambientcolor_;
    delete diffusecolor_;
    delete specularcolor_;
    delete attenuation_;
    delete model_;
  }
}

void PbMOWLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbMOWLight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMOWLight_descriptor_;
}

const PbMOWLight& PbMOWLight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MOWGraphics_2eproto();
  return *default_instance_;
}

PbMOWLight* PbMOWLight::default_instance_ = NULL;

PbMOWLight* PbMOWLight::New() const {
  return new PbMOWLight;
}

void PbMOWLight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PbMOWLight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, hasposition_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::PbMOWCommon::PbMOWVector3::Clear();
    }
    if (has_ambientcolor()) {
      if (ambientcolor_ != NULL) ambientcolor_->::PbMOWCommon::PbMOWVector4::Clear();
    }
    if (has_diffusecolor()) {
      if (diffusecolor_ != NULL) diffusecolor_->::PbMOWCommon::PbMOWVector4::Clear();
    }
    if (has_specularcolor()) {
      if (specularcolor_ != NULL) specularcolor_->::PbMOWCommon::PbMOWVector4::Clear();
    }
    if (has_attenuation()) {
      if (attenuation_ != NULL) attenuation_->::PbMOWCommon::PbMOWVector3::Clear();
    }
  }
  if (has_model()) {
    if (model_ != NULL) model_->::PbMOWGraphics::PbMOWModel::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbMOWLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbMOWGraphics.PbMOWLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PbMOWGraphics.PbMOWLight.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PbMOWGraphics::PbMOWLight_Type_IsValid(value)) {
            set_type(static_cast< ::PbMOWGraphics::PbMOWLight_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_direction;
        break;
      }

      // optional .PbMOWCommon.PbMOWVector3 direction = 3;
      case 3: {
        if (tag == 26) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ambientColor;
        break;
      }

      // optional .PbMOWCommon.PbMOWVector4 ambientColor = 4;
      case 4: {
        if (tag == 34) {
         parse_ambientColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ambientcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_diffuseColor;
        break;
      }

      // optional .PbMOWCommon.PbMOWVector4 diffuseColor = 5;
      case 5: {
        if (tag == 42) {
         parse_diffuseColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diffusecolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_specularColor;
        break;
      }

      // optional .PbMOWCommon.PbMOWVector4 specularColor = 6;
      case 6: {
        if (tag == 50) {
         parse_specularColor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specularcolor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_attenuation;
        break;
      }

      // optional .PbMOWCommon.PbMOWVector3 attenuation = 7;
      case 7: {
        if (tag == 58) {
         parse_attenuation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attenuation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_hasPosition;
        break;
      }

      // optional bool hasPosition = 8;
      case 8: {
        if (tag == 64) {
         parse_hasPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasposition_)));
          set_has_hasposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_model;
        break;
      }

      // optional .PbMOWGraphics.PbMOWModel model = 9;
      case 9: {
        if (tag == 74) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbMOWGraphics.PbMOWLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbMOWGraphics.PbMOWLight)
  return false;
#undef DO_
}

void PbMOWLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbMOWGraphics.PbMOWLight)
  // optional .PbMOWGraphics.PbMOWLight.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .PbMOWCommon.PbMOWVector3 direction = 3;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direction(), output);
  }

  // optional .PbMOWCommon.PbMOWVector4 ambientColor = 4;
  if (has_ambientcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ambientcolor(), output);
  }

  // optional .PbMOWCommon.PbMOWVector4 diffuseColor = 5;
  if (has_diffusecolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->diffusecolor(), output);
  }

  // optional .PbMOWCommon.PbMOWVector4 specularColor = 6;
  if (has_specularcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->specularcolor(), output);
  }

  // optional .PbMOWCommon.PbMOWVector3 attenuation = 7;
  if (has_attenuation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attenuation(), output);
  }

  // optional bool hasPosition = 8;
  if (has_hasposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hasposition(), output);
  }

  // optional .PbMOWGraphics.PbMOWModel model = 9;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->model(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbMOWGraphics.PbMOWLight)
}

::google::protobuf::uint8* PbMOWLight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbMOWGraphics.PbMOWLight)
  // optional .PbMOWGraphics.PbMOWLight.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .PbMOWCommon.PbMOWVector3 direction = 3;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direction(), target);
  }

  // optional .PbMOWCommon.PbMOWVector4 ambientColor = 4;
  if (has_ambientcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ambientcolor(), target);
  }

  // optional .PbMOWCommon.PbMOWVector4 diffuseColor = 5;
  if (has_diffusecolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->diffusecolor(), target);
  }

  // optional .PbMOWCommon.PbMOWVector4 specularColor = 6;
  if (has_specularcolor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->specularcolor(), target);
  }

  // optional .PbMOWCommon.PbMOWVector3 attenuation = 7;
  if (has_attenuation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attenuation(), target);
  }

  // optional bool hasPosition = 8;
  if (has_hasposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hasposition(), target);
  }

  // optional .PbMOWGraphics.PbMOWModel model = 9;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->model(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbMOWGraphics.PbMOWLight)
  return target;
}

int PbMOWLight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PbMOWGraphics.PbMOWLight.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .PbMOWCommon.PbMOWVector3 direction = 3;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }

    // optional .PbMOWCommon.PbMOWVector4 ambientColor = 4;
    if (has_ambientcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ambientcolor());
    }

    // optional .PbMOWCommon.PbMOWVector4 diffuseColor = 5;
    if (has_diffusecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diffusecolor());
    }

    // optional .PbMOWCommon.PbMOWVector4 specularColor = 6;
    if (has_specularcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specularcolor());
    }

    // optional .PbMOWCommon.PbMOWVector3 attenuation = 7;
    if (has_attenuation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attenuation());
    }

    // optional bool hasPosition = 8;
    if (has_hasposition()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PbMOWGraphics.PbMOWModel model = 9;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbMOWLight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbMOWLight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbMOWLight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbMOWLight::MergeFrom(const PbMOWLight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_direction()) {
      mutable_direction()->::PbMOWCommon::PbMOWVector3::MergeFrom(from.direction());
    }
    if (from.has_ambientcolor()) {
      mutable_ambientcolor()->::PbMOWCommon::PbMOWVector4::MergeFrom(from.ambientcolor());
    }
    if (from.has_diffusecolor()) {
      mutable_diffusecolor()->::PbMOWCommon::PbMOWVector4::MergeFrom(from.diffusecolor());
    }
    if (from.has_specularcolor()) {
      mutable_specularcolor()->::PbMOWCommon::PbMOWVector4::MergeFrom(from.specularcolor());
    }
    if (from.has_attenuation()) {
      mutable_attenuation()->::PbMOWCommon::PbMOWVector3::MergeFrom(from.attenuation());
    }
    if (from.has_hasposition()) {
      set_hasposition(from.hasposition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_model()) {
      mutable_model()->::PbMOWGraphics::PbMOWModel::MergeFrom(from.model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbMOWLight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbMOWLight::CopyFrom(const PbMOWLight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMOWLight::IsInitialized() const {

  return true;
}

void PbMOWLight::Swap(PbMOWLight* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(direction_, other->direction_);
    std::swap(ambientcolor_, other->ambientcolor_);
    std::swap(diffusecolor_, other->diffusecolor_);
    std::swap(specularcolor_, other->specularcolor_);
    std::swap(attenuation_, other->attenuation_);
    std::swap(hasposition_, other->hasposition_);
    std::swap(model_, other->model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbMOWLight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbMOWLight_descriptor_;
  metadata.reflection = PbMOWLight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbMOWVertex::kPositionFieldNumber;
const int PbMOWVertex::kTextureFieldNumber;
const int PbMOWVertex::kNormalFieldNumber;
const int PbMOWVertex::kColorFieldNumber;
#endif  // !_MSC_VER

PbMOWVertex::PbMOWVertex()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbMOWGraphics.PbMOWVertex)
}

void PbMOWVertex::InitAsDefaultInstance() {
  position_ = const_cast< ::PbMOWCommon::PbMOWVector3*>(&::PbMOWCommon::PbMOWVector3::default_instance());
  texture_ = const_cast< ::PbMOWCommon::PbMOWVector3*>(&::PbMOWCommon::PbMOWVector3::default_instance());
  normal_ = const_cast< ::PbMOWCommon::PbMOWVector3*>(&::PbMOWCommon::PbMOWVector3::default_instance());
  color_ = const_cast< ::PbMOWCommon::PbMOWVector4*>(&::PbMOWCommon::PbMOWVector4::default_instance());
}

PbMOWVertex::PbMOWVertex(const PbMOWVertex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbMOWGraphics.PbMOWVertex)
}

void PbMOWVertex::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  texture_ = NULL;
  normal_ = NULL;
  color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbMOWVertex::~PbMOWVertex() {
  // @@protoc_insertion_point(destructor:PbMOWGraphics.PbMOWVertex)
  SharedDtor();
}

void PbMOWVertex::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete texture_;
    delete normal_;
    delete color_;
  }
}

void PbMOWVertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbMOWVertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMOWVertex_descriptor_;
}

const PbMOWVertex& PbMOWVertex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MOWGraphics_2eproto();
  return *default_instance_;
}

PbMOWVertex* PbMOWVertex::default_instance_ = NULL;

PbMOWVertex* PbMOWVertex::New() const {
  return new PbMOWVertex;
}

void PbMOWVertex::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_position()) {
      if (position_ != NULL) position_->::PbMOWCommon::PbMOWVector3::Clear();
    }
    if (has_texture()) {
      if (texture_ != NULL) texture_->::PbMOWCommon::PbMOWVector3::Clear();
    }
    if (has_normal()) {
      if (normal_ != NULL) normal_->::PbMOWCommon::PbMOWVector3::Clear();
    }
    if (has_color()) {
      if (color_ != NULL) color_->::PbMOWCommon::PbMOWVector4::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbMOWVertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbMOWGraphics.PbMOWVertex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PbMOWCommon.PbMOWVector3 position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_texture;
        break;
      }

      // optional .PbMOWCommon.PbMOWVector3 texture = 2;
      case 2: {
        if (tag == 18) {
         parse_texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texture()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_normal;
        break;
      }

      // optional .PbMOWCommon.PbMOWVector3 normal = 3;
      case 3: {
        if (tag == 26) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_color;
        break;
      }

      // optional .PbMOWCommon.PbMOWVector4 color = 4;
      case 4: {
        if (tag == 34) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbMOWGraphics.PbMOWVertex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbMOWGraphics.PbMOWVertex)
  return false;
#undef DO_
}

void PbMOWVertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbMOWGraphics.PbMOWVertex)
  // optional .PbMOWCommon.PbMOWVector3 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }

  // optional .PbMOWCommon.PbMOWVector3 texture = 2;
  if (has_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->texture(), output);
  }

  // optional .PbMOWCommon.PbMOWVector3 normal = 3;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->normal(), output);
  }

  // optional .PbMOWCommon.PbMOWVector4 color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbMOWGraphics.PbMOWVertex)
}

::google::protobuf::uint8* PbMOWVertex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbMOWGraphics.PbMOWVertex)
  // optional .PbMOWCommon.PbMOWVector3 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }

  // optional .PbMOWCommon.PbMOWVector3 texture = 2;
  if (has_texture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->texture(), target);
  }

  // optional .PbMOWCommon.PbMOWVector3 normal = 3;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->normal(), target);
  }

  // optional .PbMOWCommon.PbMOWVector4 color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbMOWGraphics.PbMOWVertex)
  return target;
}

int PbMOWVertex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PbMOWCommon.PbMOWVector3 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional .PbMOWCommon.PbMOWVector3 texture = 2;
    if (has_texture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texture());
    }

    // optional .PbMOWCommon.PbMOWVector3 normal = 3;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal());
    }

    // optional .PbMOWCommon.PbMOWVector4 color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbMOWVertex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbMOWVertex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbMOWVertex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbMOWVertex::MergeFrom(const PbMOWVertex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::PbMOWCommon::PbMOWVector3::MergeFrom(from.position());
    }
    if (from.has_texture()) {
      mutable_texture()->::PbMOWCommon::PbMOWVector3::MergeFrom(from.texture());
    }
    if (from.has_normal()) {
      mutable_normal()->::PbMOWCommon::PbMOWVector3::MergeFrom(from.normal());
    }
    if (from.has_color()) {
      mutable_color()->::PbMOWCommon::PbMOWVector4::MergeFrom(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbMOWVertex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbMOWVertex::CopyFrom(const PbMOWVertex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMOWVertex::IsInitialized() const {

  return true;
}

void PbMOWVertex::Swap(PbMOWVertex* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(texture_, other->texture_);
    std::swap(normal_, other->normal_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbMOWVertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbMOWVertex_descriptor_;
  metadata.reflection = PbMOWVertex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbMOWFace::kIndicesFieldNumber;
#endif  // !_MSC_VER

PbMOWFace::PbMOWFace()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbMOWGraphics.PbMOWFace)
}

void PbMOWFace::InitAsDefaultInstance() {
}

PbMOWFace::PbMOWFace(const PbMOWFace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbMOWGraphics.PbMOWFace)
}

void PbMOWFace::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbMOWFace::~PbMOWFace() {
  // @@protoc_insertion_point(destructor:PbMOWGraphics.PbMOWFace)
  SharedDtor();
}

void PbMOWFace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbMOWFace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbMOWFace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMOWFace_descriptor_;
}

const PbMOWFace& PbMOWFace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MOWGraphics_2eproto();
  return *default_instance_;
}

PbMOWFace* PbMOWFace::default_instance_ = NULL;

PbMOWFace* PbMOWFace::New() const {
  return new PbMOWFace;
}

void PbMOWFace::Clear() {
  indices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbMOWFace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbMOWGraphics.PbMOWFace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 indices = 1;
      case 1: {
        if (tag == 8) {
         parse_indices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_indices())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indices())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_indices;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbMOWGraphics.PbMOWFace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbMOWGraphics.PbMOWFace)
  return false;
#undef DO_
}

void PbMOWFace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbMOWGraphics.PbMOWFace)
  // repeated int32 indices = 1;
  for (int i = 0; i < this->indices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->indices(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbMOWGraphics.PbMOWFace)
}

::google::protobuf::uint8* PbMOWFace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbMOWGraphics.PbMOWFace)
  // repeated int32 indices = 1;
  for (int i = 0; i < this->indices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->indices(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbMOWGraphics.PbMOWFace)
  return target;
}

int PbMOWFace::ByteSize() const {
  int total_size = 0;

  // repeated int32 indices = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->indices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->indices(i));
    }
    total_size += 1 * this->indices_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbMOWFace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbMOWFace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbMOWFace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbMOWFace::MergeFrom(const PbMOWFace& from) {
  GOOGLE_CHECK_NE(&from, this);
  indices_.MergeFrom(from.indices_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbMOWFace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbMOWFace::CopyFrom(const PbMOWFace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMOWFace::IsInitialized() const {

  return true;
}

void PbMOWFace::Swap(PbMOWFace* other) {
  if (other != this) {
    indices_.Swap(&other->indices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbMOWFace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbMOWFace_descriptor_;
  metadata.reflection = PbMOWFace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbMOWModelPart::kVerticesFieldNumber;
const int PbMOWModelPart::kFacesFieldNumber;
const int PbMOWModelPart::kNameFieldNumber;
const int PbMOWModelPart::kMaterialNameFieldNumber;
#endif  // !_MSC_VER

PbMOWModelPart::PbMOWModelPart()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbMOWGraphics.PbMOWModelPart)
}

void PbMOWModelPart::InitAsDefaultInstance() {
}

PbMOWModelPart::PbMOWModelPart(const PbMOWModelPart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbMOWGraphics.PbMOWModelPart)
}

void PbMOWModelPart::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  materialname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbMOWModelPart::~PbMOWModelPart() {
  // @@protoc_insertion_point(destructor:PbMOWGraphics.PbMOWModelPart)
  SharedDtor();
}

void PbMOWModelPart::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (materialname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete materialname_;
  }
  if (this != default_instance_) {
  }
}

void PbMOWModelPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbMOWModelPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMOWModelPart_descriptor_;
}

const PbMOWModelPart& PbMOWModelPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MOWGraphics_2eproto();
  return *default_instance_;
}

PbMOWModelPart* PbMOWModelPart::default_instance_ = NULL;

PbMOWModelPart* PbMOWModelPart::New() const {
  return new PbMOWModelPart;
}

void PbMOWModelPart::Clear() {
  if (_has_bits_[0 / 32] & 12) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_materialname()) {
      if (materialname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        materialname_->clear();
      }
    }
  }
  vertices_.Clear();
  faces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbMOWModelPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbMOWGraphics.PbMOWModelPart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PbMOWGraphics.PbMOWVertex vertices = 1;
      case 1: {
        if (tag == 10) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_vertices;
        if (input->ExpectTag(18)) goto parse_faces;
        break;
      }

      // repeated .PbMOWGraphics.PbMOWFace faces = 2;
      case 2: {
        if (tag == 18) {
         parse_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_faces;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_materialName;
        break;
      }

      // optional string materialName = 4;
      case 4: {
        if (tag == 34) {
         parse_materialName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_materialname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->materialname().data(), this->materialname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "materialname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbMOWGraphics.PbMOWModelPart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbMOWGraphics.PbMOWModelPart)
  return false;
#undef DO_
}

void PbMOWModelPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbMOWGraphics.PbMOWModelPart)
  // repeated .PbMOWGraphics.PbMOWVertex vertices = 1;
  for (int i = 0; i < this->vertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vertices(i), output);
  }

  // repeated .PbMOWGraphics.PbMOWFace faces = 2;
  for (int i = 0; i < this->faces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->faces(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string materialName = 4;
  if (has_materialname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->materialname().data(), this->materialname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "materialname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->materialname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbMOWGraphics.PbMOWModelPart)
}

::google::protobuf::uint8* PbMOWModelPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbMOWGraphics.PbMOWModelPart)
  // repeated .PbMOWGraphics.PbMOWVertex vertices = 1;
  for (int i = 0; i < this->vertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vertices(i), target);
  }

  // repeated .PbMOWGraphics.PbMOWFace faces = 2;
  for (int i = 0; i < this->faces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->faces(i), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string materialName = 4;
  if (has_materialname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->materialname().data(), this->materialname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "materialname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->materialname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbMOWGraphics.PbMOWModelPart)
  return target;
}

int PbMOWModelPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string materialName = 4;
    if (has_materialname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->materialname());
    }

  }
  // repeated .PbMOWGraphics.PbMOWVertex vertices = 1;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  // repeated .PbMOWGraphics.PbMOWFace faces = 2;
  total_size += 1 * this->faces_size();
  for (int i = 0; i < this->faces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbMOWModelPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbMOWModelPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbMOWModelPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbMOWModelPart::MergeFrom(const PbMOWModelPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  vertices_.MergeFrom(from.vertices_);
  faces_.MergeFrom(from.faces_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_materialname()) {
      set_materialname(from.materialname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbMOWModelPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbMOWModelPart::CopyFrom(const PbMOWModelPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMOWModelPart::IsInitialized() const {

  return true;
}

void PbMOWModelPart::Swap(PbMOWModelPart* other) {
  if (other != this) {
    vertices_.Swap(&other->vertices_);
    faces_.Swap(&other->faces_);
    std::swap(name_, other->name_);
    std::swap(materialname_, other->materialname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbMOWModelPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbMOWModelPart_descriptor_;
  metadata.reflection = PbMOWModelPart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbMOWBoundingSphere::kCenterFieldNumber;
const int PbMOWBoundingSphere::kRadiusFieldNumber;
#endif  // !_MSC_VER

PbMOWBoundingSphere::PbMOWBoundingSphere()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbMOWGraphics.PbMOWBoundingSphere)
}

void PbMOWBoundingSphere::InitAsDefaultInstance() {
  center_ = const_cast< ::PbMOWCommon::PbMOWVector3*>(&::PbMOWCommon::PbMOWVector3::default_instance());
}

PbMOWBoundingSphere::PbMOWBoundingSphere(const PbMOWBoundingSphere& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbMOWGraphics.PbMOWBoundingSphere)
}

void PbMOWBoundingSphere::SharedCtor() {
  _cached_size_ = 0;
  center_ = NULL;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbMOWBoundingSphere::~PbMOWBoundingSphere() {
  // @@protoc_insertion_point(destructor:PbMOWGraphics.PbMOWBoundingSphere)
  SharedDtor();
}

void PbMOWBoundingSphere::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
  }
}

void PbMOWBoundingSphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbMOWBoundingSphere::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMOWBoundingSphere_descriptor_;
}

const PbMOWBoundingSphere& PbMOWBoundingSphere::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MOWGraphics_2eproto();
  return *default_instance_;
}

PbMOWBoundingSphere* PbMOWBoundingSphere::default_instance_ = NULL;

PbMOWBoundingSphere* PbMOWBoundingSphere::New() const {
  return new PbMOWBoundingSphere;
}

void PbMOWBoundingSphere::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_center()) {
      if (center_ != NULL) center_->::PbMOWCommon::PbMOWVector3::Clear();
    }
    radius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbMOWBoundingSphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbMOWGraphics.PbMOWBoundingSphere)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PbMOWCommon.PbMOWVector3 center = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_radius;
        break;
      }

      // optional float radius = 2;
      case 2: {
        if (tag == 21) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbMOWGraphics.PbMOWBoundingSphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbMOWGraphics.PbMOWBoundingSphere)
  return false;
#undef DO_
}

void PbMOWBoundingSphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbMOWGraphics.PbMOWBoundingSphere)
  // optional .PbMOWCommon.PbMOWVector3 center = 1;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->center(), output);
  }

  // optional float radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbMOWGraphics.PbMOWBoundingSphere)
}

::google::protobuf::uint8* PbMOWBoundingSphere::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbMOWGraphics.PbMOWBoundingSphere)
  // optional .PbMOWCommon.PbMOWVector3 center = 1;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->center(), target);
  }

  // optional float radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbMOWGraphics.PbMOWBoundingSphere)
  return target;
}

int PbMOWBoundingSphere::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PbMOWCommon.PbMOWVector3 center = 1;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // optional float radius = 2;
    if (has_radius()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbMOWBoundingSphere::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbMOWBoundingSphere* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbMOWBoundingSphere*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbMOWBoundingSphere::MergeFrom(const PbMOWBoundingSphere& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center()) {
      mutable_center()->::PbMOWCommon::PbMOWVector3::MergeFrom(from.center());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbMOWBoundingSphere::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbMOWBoundingSphere::CopyFrom(const PbMOWBoundingSphere& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMOWBoundingSphere::IsInitialized() const {

  return true;
}

void PbMOWBoundingSphere::Swap(PbMOWBoundingSphere* other) {
  if (other != this) {
    std::swap(center_, other->center_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbMOWBoundingSphere::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbMOWBoundingSphere_descriptor_;
  metadata.reflection = PbMOWBoundingSphere_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbMOWBoundingBox::kNameFieldNumber;
const int PbMOWBoundingBox::kPartFieldNumber;
const int PbMOWBoundingBox::kWidthHeightDepthFieldNumber;
#endif  // !_MSC_VER

PbMOWBoundingBox::PbMOWBoundingBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbMOWGraphics.PbMOWBoundingBox)
}

void PbMOWBoundingBox::InitAsDefaultInstance() {
  part_ = const_cast< ::PbMOWGraphics::PbMOWModelPart*>(&::PbMOWGraphics::PbMOWModelPart::default_instance());
  widthheightdepth_ = const_cast< ::PbMOWCommon::PbMOWVector3*>(&::PbMOWCommon::PbMOWVector3::default_instance());
}

PbMOWBoundingBox::PbMOWBoundingBox(const PbMOWBoundingBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbMOWGraphics.PbMOWBoundingBox)
}

void PbMOWBoundingBox::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_ = NULL;
  widthheightdepth_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbMOWBoundingBox::~PbMOWBoundingBox() {
  // @@protoc_insertion_point(destructor:PbMOWGraphics.PbMOWBoundingBox)
  SharedDtor();
}

void PbMOWBoundingBox::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete part_;
    delete widthheightdepth_;
  }
}

void PbMOWBoundingBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbMOWBoundingBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMOWBoundingBox_descriptor_;
}

const PbMOWBoundingBox& PbMOWBoundingBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MOWGraphics_2eproto();
  return *default_instance_;
}

PbMOWBoundingBox* PbMOWBoundingBox::default_instance_ = NULL;

PbMOWBoundingBox* PbMOWBoundingBox::New() const {
  return new PbMOWBoundingBox;
}

void PbMOWBoundingBox::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_part()) {
      if (part_ != NULL) part_->::PbMOWGraphics::PbMOWModelPart::Clear();
    }
    if (has_widthheightdepth()) {
      if (widthheightdepth_ != NULL) widthheightdepth_->::PbMOWCommon::PbMOWVector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbMOWBoundingBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbMOWGraphics.PbMOWBoundingBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_part;
        break;
      }

      // optional .PbMOWGraphics.PbMOWModelPart part = 2;
      case 2: {
        if (tag == 18) {
         parse_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_part()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_widthHeightDepth;
        break;
      }

      // optional .PbMOWCommon.PbMOWVector3 widthHeightDepth = 3;
      case 3: {
        if (tag == 26) {
         parse_widthHeightDepth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widthheightdepth()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbMOWGraphics.PbMOWBoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbMOWGraphics.PbMOWBoundingBox)
  return false;
#undef DO_
}

void PbMOWBoundingBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbMOWGraphics.PbMOWBoundingBox)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .PbMOWGraphics.PbMOWModelPart part = 2;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->part(), output);
  }

  // optional .PbMOWCommon.PbMOWVector3 widthHeightDepth = 3;
  if (has_widthheightdepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->widthheightdepth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbMOWGraphics.PbMOWBoundingBox)
}

::google::protobuf::uint8* PbMOWBoundingBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbMOWGraphics.PbMOWBoundingBox)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .PbMOWGraphics.PbMOWModelPart part = 2;
  if (has_part()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->part(), target);
  }

  // optional .PbMOWCommon.PbMOWVector3 widthHeightDepth = 3;
  if (has_widthheightdepth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->widthheightdepth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbMOWGraphics.PbMOWBoundingBox)
  return target;
}

int PbMOWBoundingBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .PbMOWGraphics.PbMOWModelPart part = 2;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->part());
    }

    // optional .PbMOWCommon.PbMOWVector3 widthHeightDepth = 3;
    if (has_widthheightdepth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widthheightdepth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbMOWBoundingBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbMOWBoundingBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbMOWBoundingBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbMOWBoundingBox::MergeFrom(const PbMOWBoundingBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_part()) {
      mutable_part()->::PbMOWGraphics::PbMOWModelPart::MergeFrom(from.part());
    }
    if (from.has_widthheightdepth()) {
      mutable_widthheightdepth()->::PbMOWCommon::PbMOWVector3::MergeFrom(from.widthheightdepth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbMOWBoundingBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbMOWBoundingBox::CopyFrom(const PbMOWBoundingBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMOWBoundingBox::IsInitialized() const {

  return true;
}

void PbMOWBoundingBox::Swap(PbMOWBoundingBox* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(part_, other->part_);
    std::swap(widthheightdepth_, other->widthheightdepth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbMOWBoundingBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbMOWBoundingBox_descriptor_;
  metadata.reflection = PbMOWBoundingBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbMOWModel::kPartsFieldNumber;
const int PbMOWModel::kNameFieldNumber;
const int PbMOWModel::kBoundingShapeFieldNumber;
const int PbMOWModel::kBoundingBoxFieldNumber;
const int PbMOWModel::kBoundingSphereFieldNumber;
const int PbMOWModel::kPhysicalEntityFieldNumber;
const int PbMOWModel::kScaleFieldNumber;
#endif  // !_MSC_VER

PbMOWModel::PbMOWModel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbMOWGraphics.PbMOWModel)
}

void PbMOWModel::InitAsDefaultInstance() {
  boundingbox_ = const_cast< ::PbMOWGraphics::PbMOWBoundingBox*>(&::PbMOWGraphics::PbMOWBoundingBox::default_instance());
  boundingsphere_ = const_cast< ::PbMOWGraphics::PbMOWBoundingSphere*>(&::PbMOWGraphics::PbMOWBoundingSphere::default_instance());
  scale_ = const_cast< ::PbMOWCommon::PbMOWVector3*>(&::PbMOWCommon::PbMOWVector3::default_instance());
}

PbMOWModel::PbMOWModel(const PbMOWModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbMOWGraphics.PbMOWModel)
}

void PbMOWModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  boundingshape_ = 0;
  boundingbox_ = NULL;
  boundingsphere_ = NULL;
  physicalentity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbMOWModel::~PbMOWModel() {
  // @@protoc_insertion_point(destructor:PbMOWGraphics.PbMOWModel)
  SharedDtor();
}

void PbMOWModel::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (physicalentity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete physicalentity_;
  }
  if (this != default_instance_) {
    delete boundingbox_;
    delete boundingsphere_;
    delete scale_;
  }
}

void PbMOWModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbMOWModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMOWModel_descriptor_;
}

const PbMOWModel& PbMOWModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MOWGraphics_2eproto();
  return *default_instance_;
}

PbMOWModel* PbMOWModel::default_instance_ = NULL;

PbMOWModel* PbMOWModel::New() const {
  return new PbMOWModel;
}

void PbMOWModel::Clear() {
  if (_has_bits_[0 / 32] & 126) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    boundingshape_ = 0;
    if (has_boundingbox()) {
      if (boundingbox_ != NULL) boundingbox_->::PbMOWGraphics::PbMOWBoundingBox::Clear();
    }
    if (has_boundingsphere()) {
      if (boundingsphere_ != NULL) boundingsphere_->::PbMOWGraphics::PbMOWBoundingSphere::Clear();
    }
    if (has_physicalentity()) {
      if (physicalentity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        physicalentity_->clear();
      }
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::PbMOWCommon::PbMOWVector3::Clear();
    }
  }
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbMOWModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbMOWGraphics.PbMOWModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PbMOWGraphics.PbMOWModelPart parts = 1;
      case 1: {
        if (tag == 10) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_parts;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_boundingShape;
        break;
      }

      // optional .PbMOWGraphics.PbMOWBoundingShape boundingShape = 3;
      case 3: {
        if (tag == 24) {
         parse_boundingShape:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PbMOWGraphics::PbMOWBoundingShape_IsValid(value)) {
            set_boundingshape(static_cast< ::PbMOWGraphics::PbMOWBoundingShape >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_boundingBox;
        break;
      }

      // optional .PbMOWGraphics.PbMOWBoundingBox boundingBox = 4;
      case 4: {
        if (tag == 34) {
         parse_boundingBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundingbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_boundingSphere;
        break;
      }

      // optional .PbMOWGraphics.PbMOWBoundingSphere boundingSphere = 5;
      case 5: {
        if (tag == 42) {
         parse_boundingSphere:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundingsphere()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_physicalEntity;
        break;
      }

      // optional bytes physicalEntity = 6;
      case 6: {
        if (tag == 50) {
         parse_physicalEntity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_physicalentity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scale;
        break;
      }

      // optional .PbMOWCommon.PbMOWVector3 scale = 7;
      case 7: {
        if (tag == 58) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbMOWGraphics.PbMOWModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbMOWGraphics.PbMOWModel)
  return false;
#undef DO_
}

void PbMOWModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbMOWGraphics.PbMOWModel)
  // repeated .PbMOWGraphics.PbMOWModelPart parts = 1;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parts(i), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .PbMOWGraphics.PbMOWBoundingShape boundingShape = 3;
  if (has_boundingshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->boundingshape(), output);
  }

  // optional .PbMOWGraphics.PbMOWBoundingBox boundingBox = 4;
  if (has_boundingbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->boundingbox(), output);
  }

  // optional .PbMOWGraphics.PbMOWBoundingSphere boundingSphere = 5;
  if (has_boundingsphere()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->boundingsphere(), output);
  }

  // optional bytes physicalEntity = 6;
  if (has_physicalentity()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->physicalentity(), output);
  }

  // optional .PbMOWCommon.PbMOWVector3 scale = 7;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbMOWGraphics.PbMOWModel)
}

::google::protobuf::uint8* PbMOWModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbMOWGraphics.PbMOWModel)
  // repeated .PbMOWGraphics.PbMOWModelPart parts = 1;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->parts(i), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .PbMOWGraphics.PbMOWBoundingShape boundingShape = 3;
  if (has_boundingshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->boundingshape(), target);
  }

  // optional .PbMOWGraphics.PbMOWBoundingBox boundingBox = 4;
  if (has_boundingbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->boundingbox(), target);
  }

  // optional .PbMOWGraphics.PbMOWBoundingSphere boundingSphere = 5;
  if (has_boundingsphere()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->boundingsphere(), target);
  }

  // optional bytes physicalEntity = 6;
  if (has_physicalentity()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->physicalentity(), target);
  }

  // optional .PbMOWCommon.PbMOWVector3 scale = 7;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbMOWGraphics.PbMOWModel)
  return target;
}

int PbMOWModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .PbMOWGraphics.PbMOWBoundingShape boundingShape = 3;
    if (has_boundingshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->boundingshape());
    }

    // optional .PbMOWGraphics.PbMOWBoundingBox boundingBox = 4;
    if (has_boundingbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundingbox());
    }

    // optional .PbMOWGraphics.PbMOWBoundingSphere boundingSphere = 5;
    if (has_boundingsphere()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundingsphere());
    }

    // optional bytes physicalEntity = 6;
    if (has_physicalentity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->physicalentity());
    }

    // optional .PbMOWCommon.PbMOWVector3 scale = 7;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

  }
  // repeated .PbMOWGraphics.PbMOWModelPart parts = 1;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbMOWModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbMOWModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbMOWModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbMOWModel::MergeFrom(const PbMOWModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_boundingshape()) {
      set_boundingshape(from.boundingshape());
    }
    if (from.has_boundingbox()) {
      mutable_boundingbox()->::PbMOWGraphics::PbMOWBoundingBox::MergeFrom(from.boundingbox());
    }
    if (from.has_boundingsphere()) {
      mutable_boundingsphere()->::PbMOWGraphics::PbMOWBoundingSphere::MergeFrom(from.boundingsphere());
    }
    if (from.has_physicalentity()) {
      set_physicalentity(from.physicalentity());
    }
    if (from.has_scale()) {
      mutable_scale()->::PbMOWCommon::PbMOWVector3::MergeFrom(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbMOWModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbMOWModel::CopyFrom(const PbMOWModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMOWModel::IsInitialized() const {

  return true;
}

void PbMOWModel::Swap(PbMOWModel* other) {
  if (other != this) {
    parts_.Swap(&other->parts_);
    std::swap(name_, other->name_);
    std::swap(boundingshape_, other->boundingshape_);
    std::swap(boundingbox_, other->boundingbox_);
    std::swap(boundingsphere_, other->boundingsphere_);
    std::swap(physicalentity_, other->physicalentity_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbMOWModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbMOWModel_descriptor_;
  metadata.reflection = PbMOWModel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbMOWScene::kFixedModelsFieldNumber;
const int PbMOWScene::kDynamicModelsFieldNumber;
const int PbMOWScene::kCamerasFieldNumber;
const int PbMOWScene::kLightsFieldNumber;
#endif  // !_MSC_VER

PbMOWScene::PbMOWScene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PbMOWGraphics.PbMOWScene)
}

void PbMOWScene::InitAsDefaultInstance() {
}

PbMOWScene::PbMOWScene(const PbMOWScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PbMOWGraphics.PbMOWScene)
}

void PbMOWScene::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbMOWScene::~PbMOWScene() {
  // @@protoc_insertion_point(destructor:PbMOWGraphics.PbMOWScene)
  SharedDtor();
}

void PbMOWScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbMOWScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbMOWScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbMOWScene_descriptor_;
}

const PbMOWScene& PbMOWScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MOWGraphics_2eproto();
  return *default_instance_;
}

PbMOWScene* PbMOWScene::default_instance_ = NULL;

PbMOWScene* PbMOWScene::New() const {
  return new PbMOWScene;
}

void PbMOWScene::Clear() {
  fixedmodels_.Clear();
  dynamicmodels_.Clear();
  cameras_.Clear();
  lights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbMOWScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PbMOWGraphics.PbMOWScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PbMOWGraphics.PbMOWModel fixedModels = 1;
      case 1: {
        if (tag == 10) {
         parse_fixedModels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fixedmodels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_fixedModels;
        if (input->ExpectTag(18)) goto parse_dynamicModels;
        break;
      }

      // repeated .PbMOWGraphics.PbMOWModel dynamicModels = 2;
      case 2: {
        if (tag == 18) {
         parse_dynamicModels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dynamicmodels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dynamicModels;
        if (input->ExpectTag(26)) goto parse_cameras;
        break;
      }

      // repeated .PbMOWGraphics.PbMOWModel cameras = 3;
      case 3: {
        if (tag == 26) {
         parse_cameras:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cameras()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cameras;
        if (input->ExpectTag(34)) goto parse_lights;
        break;
      }

      // repeated .PbMOWGraphics.PbMOWLight lights = 4;
      case 4: {
        if (tag == 34) {
         parse_lights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lights()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lights;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PbMOWGraphics.PbMOWScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PbMOWGraphics.PbMOWScene)
  return false;
#undef DO_
}

void PbMOWScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PbMOWGraphics.PbMOWScene)
  // repeated .PbMOWGraphics.PbMOWModel fixedModels = 1;
  for (int i = 0; i < this->fixedmodels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fixedmodels(i), output);
  }

  // repeated .PbMOWGraphics.PbMOWModel dynamicModels = 2;
  for (int i = 0; i < this->dynamicmodels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dynamicmodels(i), output);
  }

  // repeated .PbMOWGraphics.PbMOWModel cameras = 3;
  for (int i = 0; i < this->cameras_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cameras(i), output);
  }

  // repeated .PbMOWGraphics.PbMOWLight lights = 4;
  for (int i = 0; i < this->lights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lights(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PbMOWGraphics.PbMOWScene)
}

::google::protobuf::uint8* PbMOWScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PbMOWGraphics.PbMOWScene)
  // repeated .PbMOWGraphics.PbMOWModel fixedModels = 1;
  for (int i = 0; i < this->fixedmodels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fixedmodels(i), target);
  }

  // repeated .PbMOWGraphics.PbMOWModel dynamicModels = 2;
  for (int i = 0; i < this->dynamicmodels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dynamicmodels(i), target);
  }

  // repeated .PbMOWGraphics.PbMOWModel cameras = 3;
  for (int i = 0; i < this->cameras_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cameras(i), target);
  }

  // repeated .PbMOWGraphics.PbMOWLight lights = 4;
  for (int i = 0; i < this->lights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lights(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PbMOWGraphics.PbMOWScene)
  return target;
}

int PbMOWScene::ByteSize() const {
  int total_size = 0;

  // repeated .PbMOWGraphics.PbMOWModel fixedModels = 1;
  total_size += 1 * this->fixedmodels_size();
  for (int i = 0; i < this->fixedmodels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fixedmodels(i));
  }

  // repeated .PbMOWGraphics.PbMOWModel dynamicModels = 2;
  total_size += 1 * this->dynamicmodels_size();
  for (int i = 0; i < this->dynamicmodels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dynamicmodels(i));
  }

  // repeated .PbMOWGraphics.PbMOWModel cameras = 3;
  total_size += 1 * this->cameras_size();
  for (int i = 0; i < this->cameras_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cameras(i));
  }

  // repeated .PbMOWGraphics.PbMOWLight lights = 4;
  total_size += 1 * this->lights_size();
  for (int i = 0; i < this->lights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lights(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbMOWScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbMOWScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbMOWScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbMOWScene::MergeFrom(const PbMOWScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  fixedmodels_.MergeFrom(from.fixedmodels_);
  dynamicmodels_.MergeFrom(from.dynamicmodels_);
  cameras_.MergeFrom(from.cameras_);
  lights_.MergeFrom(from.lights_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbMOWScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbMOWScene::CopyFrom(const PbMOWScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbMOWScene::IsInitialized() const {

  return true;
}

void PbMOWScene::Swap(PbMOWScene* other) {
  if (other != this) {
    fixedmodels_.Swap(&other->fixedmodels_);
    dynamicmodels_.Swap(&other->dynamicmodels_);
    cameras_.Swap(&other->cameras_);
    lights_.Swap(&other->lights_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbMOWScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbMOWScene_descriptor_;
  metadata.reflection = PbMOWScene_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PbMOWGraphics

// @@protoc_insertion_point(global_scope)
