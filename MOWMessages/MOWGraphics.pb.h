// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MOWGraphics.proto

#ifndef PROTOBUF_MOWGraphics_2eproto__INCLUDED
#define PROTOBUF_MOWGraphics_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "MOWCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace PbMOWGraphics {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MOWGraphics_2eproto();
void protobuf_AssignDesc_MOWGraphics_2eproto();
void protobuf_ShutdownFile_MOWGraphics_2eproto();

class PbMOWLight;
class PbMOWVertex;
class PbMOWFace;
class PbMOWModelPart;
class PbMOWBoundingSphere;
class PbMOWBoundingBox;
class PbMOWModel;
class PbMOWScene;

enum PbMOWLight_Type {
  PbMOWLight_Type_NONE = 0,
  PbMOWLight_Type_DIRECTIONAL = 1,
  PbMOWLight_Type_POINT = 2,
  PbMOWLight_Type_SPOT = 3
};
bool PbMOWLight_Type_IsValid(int value);
const PbMOWLight_Type PbMOWLight_Type_Type_MIN = PbMOWLight_Type_NONE;
const PbMOWLight_Type PbMOWLight_Type_Type_MAX = PbMOWLight_Type_SPOT;
const int PbMOWLight_Type_Type_ARRAYSIZE = PbMOWLight_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PbMOWLight_Type_descriptor();
inline const ::std::string& PbMOWLight_Type_Name(PbMOWLight_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PbMOWLight_Type_descriptor(), value);
}
inline bool PbMOWLight_Type_Parse(
    const ::std::string& name, PbMOWLight_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PbMOWLight_Type>(
    PbMOWLight_Type_descriptor(), name, value);
}
enum PbMOWBoundingShape {
  PMBS_NONE = 0,
  PMBS_BOX = 1,
  PMBS_SPHERE = 2
};
bool PbMOWBoundingShape_IsValid(int value);
const PbMOWBoundingShape PbMOWBoundingShape_MIN = PMBS_NONE;
const PbMOWBoundingShape PbMOWBoundingShape_MAX = PMBS_SPHERE;
const int PbMOWBoundingShape_ARRAYSIZE = PbMOWBoundingShape_MAX + 1;

const ::google::protobuf::EnumDescriptor* PbMOWBoundingShape_descriptor();
inline const ::std::string& PbMOWBoundingShape_Name(PbMOWBoundingShape value) {
  return ::google::protobuf::internal::NameOfEnum(
    PbMOWBoundingShape_descriptor(), value);
}
inline bool PbMOWBoundingShape_Parse(
    const ::std::string& name, PbMOWBoundingShape* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PbMOWBoundingShape>(
    PbMOWBoundingShape_descriptor(), name, value);
}
// ===================================================================

class PbMOWLight : public ::google::protobuf::Message {
 public:
  PbMOWLight();
  virtual ~PbMOWLight();

  PbMOWLight(const PbMOWLight& from);

  inline PbMOWLight& operator=(const PbMOWLight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbMOWLight& default_instance();

  void Swap(PbMOWLight* other);

  // implements Message ----------------------------------------------

  PbMOWLight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbMOWLight& from);
  void MergeFrom(const PbMOWLight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PbMOWLight_Type Type;
  static const Type NONE = PbMOWLight_Type_NONE;
  static const Type DIRECTIONAL = PbMOWLight_Type_DIRECTIONAL;
  static const Type POINT = PbMOWLight_Type_POINT;
  static const Type SPOT = PbMOWLight_Type_SPOT;
  static inline bool Type_IsValid(int value) {
    return PbMOWLight_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PbMOWLight_Type_Type_MIN;
  static const Type Type_MAX =
    PbMOWLight_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PbMOWLight_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PbMOWLight_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PbMOWLight_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PbMOWLight_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PbMOWGraphics.PbMOWLight.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PbMOWGraphics::PbMOWLight_Type type() const;
  inline void set_type(::PbMOWGraphics::PbMOWLight_Type value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .PbMOWCommon.PbMOWVector3 direction = 3;
  inline bool has_direction() const;
  inline void clear_direction();
  static const int kDirectionFieldNumber = 3;
  inline const ::PbMOWCommon::PbMOWVector3& direction() const;
  inline ::PbMOWCommon::PbMOWVector3* mutable_direction();
  inline ::PbMOWCommon::PbMOWVector3* release_direction();
  inline void set_allocated_direction(::PbMOWCommon::PbMOWVector3* direction);

  // optional .PbMOWCommon.PbMOWVector4 ambientColor = 4;
  inline bool has_ambientcolor() const;
  inline void clear_ambientcolor();
  static const int kAmbientColorFieldNumber = 4;
  inline const ::PbMOWCommon::PbMOWVector4& ambientcolor() const;
  inline ::PbMOWCommon::PbMOWVector4* mutable_ambientcolor();
  inline ::PbMOWCommon::PbMOWVector4* release_ambientcolor();
  inline void set_allocated_ambientcolor(::PbMOWCommon::PbMOWVector4* ambientcolor);

  // optional .PbMOWCommon.PbMOWVector4 diffuseColor = 5;
  inline bool has_diffusecolor() const;
  inline void clear_diffusecolor();
  static const int kDiffuseColorFieldNumber = 5;
  inline const ::PbMOWCommon::PbMOWVector4& diffusecolor() const;
  inline ::PbMOWCommon::PbMOWVector4* mutable_diffusecolor();
  inline ::PbMOWCommon::PbMOWVector4* release_diffusecolor();
  inline void set_allocated_diffusecolor(::PbMOWCommon::PbMOWVector4* diffusecolor);

  // optional .PbMOWCommon.PbMOWVector4 specularColor = 6;
  inline bool has_specularcolor() const;
  inline void clear_specularcolor();
  static const int kSpecularColorFieldNumber = 6;
  inline const ::PbMOWCommon::PbMOWVector4& specularcolor() const;
  inline ::PbMOWCommon::PbMOWVector4* mutable_specularcolor();
  inline ::PbMOWCommon::PbMOWVector4* release_specularcolor();
  inline void set_allocated_specularcolor(::PbMOWCommon::PbMOWVector4* specularcolor);

  // optional .PbMOWCommon.PbMOWVector3 attenuation = 7;
  inline bool has_attenuation() const;
  inline void clear_attenuation();
  static const int kAttenuationFieldNumber = 7;
  inline const ::PbMOWCommon::PbMOWVector3& attenuation() const;
  inline ::PbMOWCommon::PbMOWVector3* mutable_attenuation();
  inline ::PbMOWCommon::PbMOWVector3* release_attenuation();
  inline void set_allocated_attenuation(::PbMOWCommon::PbMOWVector3* attenuation);

  // optional bool hasPosition = 8;
  inline bool has_hasposition() const;
  inline void clear_hasposition();
  static const int kHasPositionFieldNumber = 8;
  inline bool hasposition() const;
  inline void set_hasposition(bool value);

  // optional .PbMOWGraphics.PbMOWModel model = 9;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 9;
  inline const ::PbMOWGraphics::PbMOWModel& model() const;
  inline ::PbMOWGraphics::PbMOWModel* mutable_model();
  inline ::PbMOWGraphics::PbMOWModel* release_model();
  inline void set_allocated_model(::PbMOWGraphics::PbMOWModel* model);

  // @@protoc_insertion_point(class_scope:PbMOWGraphics.PbMOWLight)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_direction();
  inline void clear_has_direction();
  inline void set_has_ambientcolor();
  inline void clear_has_ambientcolor();
  inline void set_has_diffusecolor();
  inline void clear_has_diffusecolor();
  inline void set_has_specularcolor();
  inline void clear_has_specularcolor();
  inline void set_has_attenuation();
  inline void clear_has_attenuation();
  inline void set_has_hasposition();
  inline void clear_has_hasposition();
  inline void set_has_model();
  inline void clear_has_model();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::PbMOWCommon::PbMOWVector3* direction_;
  ::PbMOWCommon::PbMOWVector4* ambientcolor_;
  int type_;
  bool hasposition_;
  ::PbMOWCommon::PbMOWVector4* diffusecolor_;
  ::PbMOWCommon::PbMOWVector4* specularcolor_;
  ::PbMOWCommon::PbMOWVector3* attenuation_;
  ::PbMOWGraphics::PbMOWModel* model_;
  friend void  protobuf_AddDesc_MOWGraphics_2eproto();
  friend void protobuf_AssignDesc_MOWGraphics_2eproto();
  friend void protobuf_ShutdownFile_MOWGraphics_2eproto();

  void InitAsDefaultInstance();
  static PbMOWLight* default_instance_;
};
// -------------------------------------------------------------------

class PbMOWVertex : public ::google::protobuf::Message {
 public:
  PbMOWVertex();
  virtual ~PbMOWVertex();

  PbMOWVertex(const PbMOWVertex& from);

  inline PbMOWVertex& operator=(const PbMOWVertex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbMOWVertex& default_instance();

  void Swap(PbMOWVertex* other);

  // implements Message ----------------------------------------------

  PbMOWVertex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbMOWVertex& from);
  void MergeFrom(const PbMOWVertex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PbMOWCommon.PbMOWVector3 position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::PbMOWCommon::PbMOWVector3& position() const;
  inline ::PbMOWCommon::PbMOWVector3* mutable_position();
  inline ::PbMOWCommon::PbMOWVector3* release_position();
  inline void set_allocated_position(::PbMOWCommon::PbMOWVector3* position);

  // optional .PbMOWCommon.PbMOWVector3 texture = 2;
  inline bool has_texture() const;
  inline void clear_texture();
  static const int kTextureFieldNumber = 2;
  inline const ::PbMOWCommon::PbMOWVector3& texture() const;
  inline ::PbMOWCommon::PbMOWVector3* mutable_texture();
  inline ::PbMOWCommon::PbMOWVector3* release_texture();
  inline void set_allocated_texture(::PbMOWCommon::PbMOWVector3* texture);

  // optional .PbMOWCommon.PbMOWVector3 normal = 3;
  inline bool has_normal() const;
  inline void clear_normal();
  static const int kNormalFieldNumber = 3;
  inline const ::PbMOWCommon::PbMOWVector3& normal() const;
  inline ::PbMOWCommon::PbMOWVector3* mutable_normal();
  inline ::PbMOWCommon::PbMOWVector3* release_normal();
  inline void set_allocated_normal(::PbMOWCommon::PbMOWVector3* normal);

  // optional .PbMOWCommon.PbMOWVector4 color = 4;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline const ::PbMOWCommon::PbMOWVector4& color() const;
  inline ::PbMOWCommon::PbMOWVector4* mutable_color();
  inline ::PbMOWCommon::PbMOWVector4* release_color();
  inline void set_allocated_color(::PbMOWCommon::PbMOWVector4* color);

  // @@protoc_insertion_point(class_scope:PbMOWGraphics.PbMOWVertex)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_texture();
  inline void clear_has_texture();
  inline void set_has_normal();
  inline void clear_has_normal();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbMOWCommon::PbMOWVector3* position_;
  ::PbMOWCommon::PbMOWVector3* texture_;
  ::PbMOWCommon::PbMOWVector3* normal_;
  ::PbMOWCommon::PbMOWVector4* color_;
  friend void  protobuf_AddDesc_MOWGraphics_2eproto();
  friend void protobuf_AssignDesc_MOWGraphics_2eproto();
  friend void protobuf_ShutdownFile_MOWGraphics_2eproto();

  void InitAsDefaultInstance();
  static PbMOWVertex* default_instance_;
};
// -------------------------------------------------------------------

class PbMOWFace : public ::google::protobuf::Message {
 public:
  PbMOWFace();
  virtual ~PbMOWFace();

  PbMOWFace(const PbMOWFace& from);

  inline PbMOWFace& operator=(const PbMOWFace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbMOWFace& default_instance();

  void Swap(PbMOWFace* other);

  // implements Message ----------------------------------------------

  PbMOWFace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbMOWFace& from);
  void MergeFrom(const PbMOWFace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 indices = 1;
  inline int indices_size() const;
  inline void clear_indices();
  static const int kIndicesFieldNumber = 1;
  inline ::google::protobuf::int32 indices(int index) const;
  inline void set_indices(int index, ::google::protobuf::int32 value);
  inline void add_indices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      indices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_indices();

  // @@protoc_insertion_point(class_scope:PbMOWGraphics.PbMOWFace)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > indices_;
  friend void  protobuf_AddDesc_MOWGraphics_2eproto();
  friend void protobuf_AssignDesc_MOWGraphics_2eproto();
  friend void protobuf_ShutdownFile_MOWGraphics_2eproto();

  void InitAsDefaultInstance();
  static PbMOWFace* default_instance_;
};
// -------------------------------------------------------------------

class PbMOWModelPart : public ::google::protobuf::Message {
 public:
  PbMOWModelPart();
  virtual ~PbMOWModelPart();

  PbMOWModelPart(const PbMOWModelPart& from);

  inline PbMOWModelPart& operator=(const PbMOWModelPart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbMOWModelPart& default_instance();

  void Swap(PbMOWModelPart* other);

  // implements Message ----------------------------------------------

  PbMOWModelPart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbMOWModelPart& from);
  void MergeFrom(const PbMOWModelPart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PbMOWGraphics.PbMOWVertex vertices = 1;
  inline int vertices_size() const;
  inline void clear_vertices();
  static const int kVerticesFieldNumber = 1;
  inline const ::PbMOWGraphics::PbMOWVertex& vertices(int index) const;
  inline ::PbMOWGraphics::PbMOWVertex* mutable_vertices(int index);
  inline ::PbMOWGraphics::PbMOWVertex* add_vertices();
  inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWVertex >&
      vertices() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWVertex >*
      mutable_vertices();

  // repeated .PbMOWGraphics.PbMOWFace faces = 2;
  inline int faces_size() const;
  inline void clear_faces();
  static const int kFacesFieldNumber = 2;
  inline const ::PbMOWGraphics::PbMOWFace& faces(int index) const;
  inline ::PbMOWGraphics::PbMOWFace* mutable_faces(int index);
  inline ::PbMOWGraphics::PbMOWFace* add_faces();
  inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWFace >&
      faces() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWFace >*
      mutable_faces();

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string materialName = 4;
  inline bool has_materialname() const;
  inline void clear_materialname();
  static const int kMaterialNameFieldNumber = 4;
  inline const ::std::string& materialname() const;
  inline void set_materialname(const ::std::string& value);
  inline void set_materialname(const char* value);
  inline void set_materialname(const char* value, size_t size);
  inline ::std::string* mutable_materialname();
  inline ::std::string* release_materialname();
  inline void set_allocated_materialname(::std::string* materialname);

  // @@protoc_insertion_point(class_scope:PbMOWGraphics.PbMOWModelPart)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_materialname();
  inline void clear_has_materialname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWVertex > vertices_;
  ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWFace > faces_;
  ::std::string* name_;
  ::std::string* materialname_;
  friend void  protobuf_AddDesc_MOWGraphics_2eproto();
  friend void protobuf_AssignDesc_MOWGraphics_2eproto();
  friend void protobuf_ShutdownFile_MOWGraphics_2eproto();

  void InitAsDefaultInstance();
  static PbMOWModelPart* default_instance_;
};
// -------------------------------------------------------------------

class PbMOWBoundingSphere : public ::google::protobuf::Message {
 public:
  PbMOWBoundingSphere();
  virtual ~PbMOWBoundingSphere();

  PbMOWBoundingSphere(const PbMOWBoundingSphere& from);

  inline PbMOWBoundingSphere& operator=(const PbMOWBoundingSphere& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbMOWBoundingSphere& default_instance();

  void Swap(PbMOWBoundingSphere* other);

  // implements Message ----------------------------------------------

  PbMOWBoundingSphere* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbMOWBoundingSphere& from);
  void MergeFrom(const PbMOWBoundingSphere& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PbMOWCommon.PbMOWVector3 center = 1;
  inline bool has_center() const;
  inline void clear_center();
  static const int kCenterFieldNumber = 1;
  inline const ::PbMOWCommon::PbMOWVector3& center() const;
  inline ::PbMOWCommon::PbMOWVector3* mutable_center();
  inline ::PbMOWCommon::PbMOWVector3* release_center();
  inline void set_allocated_center(::PbMOWCommon::PbMOWVector3* center);

  // optional float radius = 2;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 2;
  inline float radius() const;
  inline void set_radius(float value);

  // @@protoc_insertion_point(class_scope:PbMOWGraphics.PbMOWBoundingSphere)
 private:
  inline void set_has_center();
  inline void clear_has_center();
  inline void set_has_radius();
  inline void clear_has_radius();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::PbMOWCommon::PbMOWVector3* center_;
  float radius_;
  friend void  protobuf_AddDesc_MOWGraphics_2eproto();
  friend void protobuf_AssignDesc_MOWGraphics_2eproto();
  friend void protobuf_ShutdownFile_MOWGraphics_2eproto();

  void InitAsDefaultInstance();
  static PbMOWBoundingSphere* default_instance_;
};
// -------------------------------------------------------------------

class PbMOWBoundingBox : public ::google::protobuf::Message {
 public:
  PbMOWBoundingBox();
  virtual ~PbMOWBoundingBox();

  PbMOWBoundingBox(const PbMOWBoundingBox& from);

  inline PbMOWBoundingBox& operator=(const PbMOWBoundingBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbMOWBoundingBox& default_instance();

  void Swap(PbMOWBoundingBox* other);

  // implements Message ----------------------------------------------

  PbMOWBoundingBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbMOWBoundingBox& from);
  void MergeFrom(const PbMOWBoundingBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .PbMOWGraphics.PbMOWModelPart part = 2;
  inline bool has_part() const;
  inline void clear_part();
  static const int kPartFieldNumber = 2;
  inline const ::PbMOWGraphics::PbMOWModelPart& part() const;
  inline ::PbMOWGraphics::PbMOWModelPart* mutable_part();
  inline ::PbMOWGraphics::PbMOWModelPart* release_part();
  inline void set_allocated_part(::PbMOWGraphics::PbMOWModelPart* part);

  // optional .PbMOWCommon.PbMOWVector3 widthHeightDepth = 3;
  inline bool has_widthheightdepth() const;
  inline void clear_widthheightdepth();
  static const int kWidthHeightDepthFieldNumber = 3;
  inline const ::PbMOWCommon::PbMOWVector3& widthheightdepth() const;
  inline ::PbMOWCommon::PbMOWVector3* mutable_widthheightdepth();
  inline ::PbMOWCommon::PbMOWVector3* release_widthheightdepth();
  inline void set_allocated_widthheightdepth(::PbMOWCommon::PbMOWVector3* widthheightdepth);

  // @@protoc_insertion_point(class_scope:PbMOWGraphics.PbMOWBoundingBox)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_part();
  inline void clear_has_part();
  inline void set_has_widthheightdepth();
  inline void clear_has_widthheightdepth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::PbMOWGraphics::PbMOWModelPart* part_;
  ::PbMOWCommon::PbMOWVector3* widthheightdepth_;
  friend void  protobuf_AddDesc_MOWGraphics_2eproto();
  friend void protobuf_AssignDesc_MOWGraphics_2eproto();
  friend void protobuf_ShutdownFile_MOWGraphics_2eproto();

  void InitAsDefaultInstance();
  static PbMOWBoundingBox* default_instance_;
};
// -------------------------------------------------------------------

class PbMOWModel : public ::google::protobuf::Message {
 public:
  PbMOWModel();
  virtual ~PbMOWModel();

  PbMOWModel(const PbMOWModel& from);

  inline PbMOWModel& operator=(const PbMOWModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbMOWModel& default_instance();

  void Swap(PbMOWModel* other);

  // implements Message ----------------------------------------------

  PbMOWModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbMOWModel& from);
  void MergeFrom(const PbMOWModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PbMOWGraphics.PbMOWModelPart parts = 1;
  inline int parts_size() const;
  inline void clear_parts();
  static const int kPartsFieldNumber = 1;
  inline const ::PbMOWGraphics::PbMOWModelPart& parts(int index) const;
  inline ::PbMOWGraphics::PbMOWModelPart* mutable_parts(int index);
  inline ::PbMOWGraphics::PbMOWModelPart* add_parts();
  inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModelPart >&
      parts() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModelPart >*
      mutable_parts();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .PbMOWGraphics.PbMOWBoundingShape boundingShape = 3;
  inline bool has_boundingshape() const;
  inline void clear_boundingshape();
  static const int kBoundingShapeFieldNumber = 3;
  inline ::PbMOWGraphics::PbMOWBoundingShape boundingshape() const;
  inline void set_boundingshape(::PbMOWGraphics::PbMOWBoundingShape value);

  // optional .PbMOWGraphics.PbMOWBoundingBox boundingBox = 4;
  inline bool has_boundingbox() const;
  inline void clear_boundingbox();
  static const int kBoundingBoxFieldNumber = 4;
  inline const ::PbMOWGraphics::PbMOWBoundingBox& boundingbox() const;
  inline ::PbMOWGraphics::PbMOWBoundingBox* mutable_boundingbox();
  inline ::PbMOWGraphics::PbMOWBoundingBox* release_boundingbox();
  inline void set_allocated_boundingbox(::PbMOWGraphics::PbMOWBoundingBox* boundingbox);

  // optional .PbMOWGraphics.PbMOWBoundingSphere boundingSphere = 5;
  inline bool has_boundingsphere() const;
  inline void clear_boundingsphere();
  static const int kBoundingSphereFieldNumber = 5;
  inline const ::PbMOWGraphics::PbMOWBoundingSphere& boundingsphere() const;
  inline ::PbMOWGraphics::PbMOWBoundingSphere* mutable_boundingsphere();
  inline ::PbMOWGraphics::PbMOWBoundingSphere* release_boundingsphere();
  inline void set_allocated_boundingsphere(::PbMOWGraphics::PbMOWBoundingSphere* boundingsphere);

  // optional bytes physicalEntity = 6;
  inline bool has_physicalentity() const;
  inline void clear_physicalentity();
  static const int kPhysicalEntityFieldNumber = 6;
  inline const ::std::string& physicalentity() const;
  inline void set_physicalentity(const ::std::string& value);
  inline void set_physicalentity(const char* value);
  inline void set_physicalentity(const void* value, size_t size);
  inline ::std::string* mutable_physicalentity();
  inline ::std::string* release_physicalentity();
  inline void set_allocated_physicalentity(::std::string* physicalentity);

  // optional .PbMOWCommon.PbMOWVector3 scale = 7;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 7;
  inline const ::PbMOWCommon::PbMOWVector3& scale() const;
  inline ::PbMOWCommon::PbMOWVector3* mutable_scale();
  inline ::PbMOWCommon::PbMOWVector3* release_scale();
  inline void set_allocated_scale(::PbMOWCommon::PbMOWVector3* scale);

  // @@protoc_insertion_point(class_scope:PbMOWGraphics.PbMOWModel)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_boundingshape();
  inline void clear_has_boundingshape();
  inline void set_has_boundingbox();
  inline void clear_has_boundingbox();
  inline void set_has_boundingsphere();
  inline void clear_has_boundingsphere();
  inline void set_has_physicalentity();
  inline void clear_has_physicalentity();
  inline void set_has_scale();
  inline void clear_has_scale();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModelPart > parts_;
  ::std::string* name_;
  ::PbMOWGraphics::PbMOWBoundingBox* boundingbox_;
  ::PbMOWGraphics::PbMOWBoundingSphere* boundingsphere_;
  ::std::string* physicalentity_;
  ::PbMOWCommon::PbMOWVector3* scale_;
  int boundingshape_;
  friend void  protobuf_AddDesc_MOWGraphics_2eproto();
  friend void protobuf_AssignDesc_MOWGraphics_2eproto();
  friend void protobuf_ShutdownFile_MOWGraphics_2eproto();

  void InitAsDefaultInstance();
  static PbMOWModel* default_instance_;
};
// -------------------------------------------------------------------

class PbMOWScene : public ::google::protobuf::Message {
 public:
  PbMOWScene();
  virtual ~PbMOWScene();

  PbMOWScene(const PbMOWScene& from);

  inline PbMOWScene& operator=(const PbMOWScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbMOWScene& default_instance();

  void Swap(PbMOWScene* other);

  // implements Message ----------------------------------------------

  PbMOWScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbMOWScene& from);
  void MergeFrom(const PbMOWScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PbMOWGraphics.PbMOWModel fixedModels = 1;
  inline int fixedmodels_size() const;
  inline void clear_fixedmodels();
  static const int kFixedModelsFieldNumber = 1;
  inline const ::PbMOWGraphics::PbMOWModel& fixedmodels(int index) const;
  inline ::PbMOWGraphics::PbMOWModel* mutable_fixedmodels(int index);
  inline ::PbMOWGraphics::PbMOWModel* add_fixedmodels();
  inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >&
      fixedmodels() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >*
      mutable_fixedmodels();

  // repeated .PbMOWGraphics.PbMOWModel dynamicModels = 2;
  inline int dynamicmodels_size() const;
  inline void clear_dynamicmodels();
  static const int kDynamicModelsFieldNumber = 2;
  inline const ::PbMOWGraphics::PbMOWModel& dynamicmodels(int index) const;
  inline ::PbMOWGraphics::PbMOWModel* mutable_dynamicmodels(int index);
  inline ::PbMOWGraphics::PbMOWModel* add_dynamicmodels();
  inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >&
      dynamicmodels() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >*
      mutable_dynamicmodels();

  // repeated .PbMOWGraphics.PbMOWModel cameras = 3;
  inline int cameras_size() const;
  inline void clear_cameras();
  static const int kCamerasFieldNumber = 3;
  inline const ::PbMOWGraphics::PbMOWModel& cameras(int index) const;
  inline ::PbMOWGraphics::PbMOWModel* mutable_cameras(int index);
  inline ::PbMOWGraphics::PbMOWModel* add_cameras();
  inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >&
      cameras() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >*
      mutable_cameras();

  // repeated .PbMOWGraphics.PbMOWLight lights = 4;
  inline int lights_size() const;
  inline void clear_lights();
  static const int kLightsFieldNumber = 4;
  inline const ::PbMOWGraphics::PbMOWLight& lights(int index) const;
  inline ::PbMOWGraphics::PbMOWLight* mutable_lights(int index);
  inline ::PbMOWGraphics::PbMOWLight* add_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWLight >&
      lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWLight >*
      mutable_lights();

  // @@protoc_insertion_point(class_scope:PbMOWGraphics.PbMOWScene)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel > fixedmodels_;
  ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel > dynamicmodels_;
  ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel > cameras_;
  ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWLight > lights_;
  friend void  protobuf_AddDesc_MOWGraphics_2eproto();
  friend void protobuf_AssignDesc_MOWGraphics_2eproto();
  friend void protobuf_ShutdownFile_MOWGraphics_2eproto();

  void InitAsDefaultInstance();
  static PbMOWScene* default_instance_;
};
// ===================================================================


// ===================================================================

// PbMOWLight

// optional .PbMOWGraphics.PbMOWLight.Type type = 1;
inline bool PbMOWLight::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbMOWLight::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbMOWLight::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbMOWLight::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PbMOWGraphics::PbMOWLight_Type PbMOWLight::type() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWLight.type)
  return static_cast< ::PbMOWGraphics::PbMOWLight_Type >(type_);
}
inline void PbMOWLight::set_type(::PbMOWGraphics::PbMOWLight_Type value) {
  assert(::PbMOWGraphics::PbMOWLight_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:PbMOWGraphics.PbMOWLight.type)
}

// optional string name = 2;
inline bool PbMOWLight::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbMOWLight::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbMOWLight::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbMOWLight::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PbMOWLight::name() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWLight.name)
  return *name_;
}
inline void PbMOWLight::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:PbMOWGraphics.PbMOWLight.name)
}
inline void PbMOWLight::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbMOWGraphics.PbMOWLight.name)
}
inline void PbMOWLight::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbMOWGraphics.PbMOWLight.name)
}
inline ::std::string* PbMOWLight::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWLight.name)
  return name_;
}
inline ::std::string* PbMOWLight::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbMOWLight::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWLight.name)
}

// optional .PbMOWCommon.PbMOWVector3 direction = 3;
inline bool PbMOWLight::has_direction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbMOWLight::set_has_direction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbMOWLight::clear_has_direction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbMOWLight::clear_direction() {
  if (direction_ != NULL) direction_->::PbMOWCommon::PbMOWVector3::Clear();
  clear_has_direction();
}
inline const ::PbMOWCommon::PbMOWVector3& PbMOWLight::direction() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWLight.direction)
  return direction_ != NULL ? *direction_ : *default_instance_->direction_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWLight::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) direction_ = new ::PbMOWCommon::PbMOWVector3;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWLight.direction)
  return direction_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWLight::release_direction() {
  clear_has_direction();
  ::PbMOWCommon::PbMOWVector3* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline void PbMOWLight::set_allocated_direction(::PbMOWCommon::PbMOWVector3* direction) {
  delete direction_;
  direction_ = direction;
  if (direction) {
    set_has_direction();
  } else {
    clear_has_direction();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWLight.direction)
}

// optional .PbMOWCommon.PbMOWVector4 ambientColor = 4;
inline bool PbMOWLight::has_ambientcolor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbMOWLight::set_has_ambientcolor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbMOWLight::clear_has_ambientcolor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbMOWLight::clear_ambientcolor() {
  if (ambientcolor_ != NULL) ambientcolor_->::PbMOWCommon::PbMOWVector4::Clear();
  clear_has_ambientcolor();
}
inline const ::PbMOWCommon::PbMOWVector4& PbMOWLight::ambientcolor() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWLight.ambientColor)
  return ambientcolor_ != NULL ? *ambientcolor_ : *default_instance_->ambientcolor_;
}
inline ::PbMOWCommon::PbMOWVector4* PbMOWLight::mutable_ambientcolor() {
  set_has_ambientcolor();
  if (ambientcolor_ == NULL) ambientcolor_ = new ::PbMOWCommon::PbMOWVector4;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWLight.ambientColor)
  return ambientcolor_;
}
inline ::PbMOWCommon::PbMOWVector4* PbMOWLight::release_ambientcolor() {
  clear_has_ambientcolor();
  ::PbMOWCommon::PbMOWVector4* temp = ambientcolor_;
  ambientcolor_ = NULL;
  return temp;
}
inline void PbMOWLight::set_allocated_ambientcolor(::PbMOWCommon::PbMOWVector4* ambientcolor) {
  delete ambientcolor_;
  ambientcolor_ = ambientcolor;
  if (ambientcolor) {
    set_has_ambientcolor();
  } else {
    clear_has_ambientcolor();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWLight.ambientColor)
}

// optional .PbMOWCommon.PbMOWVector4 diffuseColor = 5;
inline bool PbMOWLight::has_diffusecolor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbMOWLight::set_has_diffusecolor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbMOWLight::clear_has_diffusecolor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbMOWLight::clear_diffusecolor() {
  if (diffusecolor_ != NULL) diffusecolor_->::PbMOWCommon::PbMOWVector4::Clear();
  clear_has_diffusecolor();
}
inline const ::PbMOWCommon::PbMOWVector4& PbMOWLight::diffusecolor() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWLight.diffuseColor)
  return diffusecolor_ != NULL ? *diffusecolor_ : *default_instance_->diffusecolor_;
}
inline ::PbMOWCommon::PbMOWVector4* PbMOWLight::mutable_diffusecolor() {
  set_has_diffusecolor();
  if (diffusecolor_ == NULL) diffusecolor_ = new ::PbMOWCommon::PbMOWVector4;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWLight.diffuseColor)
  return diffusecolor_;
}
inline ::PbMOWCommon::PbMOWVector4* PbMOWLight::release_diffusecolor() {
  clear_has_diffusecolor();
  ::PbMOWCommon::PbMOWVector4* temp = diffusecolor_;
  diffusecolor_ = NULL;
  return temp;
}
inline void PbMOWLight::set_allocated_diffusecolor(::PbMOWCommon::PbMOWVector4* diffusecolor) {
  delete diffusecolor_;
  diffusecolor_ = diffusecolor;
  if (diffusecolor) {
    set_has_diffusecolor();
  } else {
    clear_has_diffusecolor();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWLight.diffuseColor)
}

// optional .PbMOWCommon.PbMOWVector4 specularColor = 6;
inline bool PbMOWLight::has_specularcolor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbMOWLight::set_has_specularcolor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbMOWLight::clear_has_specularcolor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbMOWLight::clear_specularcolor() {
  if (specularcolor_ != NULL) specularcolor_->::PbMOWCommon::PbMOWVector4::Clear();
  clear_has_specularcolor();
}
inline const ::PbMOWCommon::PbMOWVector4& PbMOWLight::specularcolor() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWLight.specularColor)
  return specularcolor_ != NULL ? *specularcolor_ : *default_instance_->specularcolor_;
}
inline ::PbMOWCommon::PbMOWVector4* PbMOWLight::mutable_specularcolor() {
  set_has_specularcolor();
  if (specularcolor_ == NULL) specularcolor_ = new ::PbMOWCommon::PbMOWVector4;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWLight.specularColor)
  return specularcolor_;
}
inline ::PbMOWCommon::PbMOWVector4* PbMOWLight::release_specularcolor() {
  clear_has_specularcolor();
  ::PbMOWCommon::PbMOWVector4* temp = specularcolor_;
  specularcolor_ = NULL;
  return temp;
}
inline void PbMOWLight::set_allocated_specularcolor(::PbMOWCommon::PbMOWVector4* specularcolor) {
  delete specularcolor_;
  specularcolor_ = specularcolor;
  if (specularcolor) {
    set_has_specularcolor();
  } else {
    clear_has_specularcolor();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWLight.specularColor)
}

// optional .PbMOWCommon.PbMOWVector3 attenuation = 7;
inline bool PbMOWLight::has_attenuation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbMOWLight::set_has_attenuation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbMOWLight::clear_has_attenuation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbMOWLight::clear_attenuation() {
  if (attenuation_ != NULL) attenuation_->::PbMOWCommon::PbMOWVector3::Clear();
  clear_has_attenuation();
}
inline const ::PbMOWCommon::PbMOWVector3& PbMOWLight::attenuation() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWLight.attenuation)
  return attenuation_ != NULL ? *attenuation_ : *default_instance_->attenuation_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWLight::mutable_attenuation() {
  set_has_attenuation();
  if (attenuation_ == NULL) attenuation_ = new ::PbMOWCommon::PbMOWVector3;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWLight.attenuation)
  return attenuation_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWLight::release_attenuation() {
  clear_has_attenuation();
  ::PbMOWCommon::PbMOWVector3* temp = attenuation_;
  attenuation_ = NULL;
  return temp;
}
inline void PbMOWLight::set_allocated_attenuation(::PbMOWCommon::PbMOWVector3* attenuation) {
  delete attenuation_;
  attenuation_ = attenuation;
  if (attenuation) {
    set_has_attenuation();
  } else {
    clear_has_attenuation();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWLight.attenuation)
}

// optional bool hasPosition = 8;
inline bool PbMOWLight::has_hasposition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PbMOWLight::set_has_hasposition() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PbMOWLight::clear_has_hasposition() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PbMOWLight::clear_hasposition() {
  hasposition_ = false;
  clear_has_hasposition();
}
inline bool PbMOWLight::hasposition() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWLight.hasPosition)
  return hasposition_;
}
inline void PbMOWLight::set_hasposition(bool value) {
  set_has_hasposition();
  hasposition_ = value;
  // @@protoc_insertion_point(field_set:PbMOWGraphics.PbMOWLight.hasPosition)
}

// optional .PbMOWGraphics.PbMOWModel model = 9;
inline bool PbMOWLight::has_model() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PbMOWLight::set_has_model() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PbMOWLight::clear_has_model() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PbMOWLight::clear_model() {
  if (model_ != NULL) model_->::PbMOWGraphics::PbMOWModel::Clear();
  clear_has_model();
}
inline const ::PbMOWGraphics::PbMOWModel& PbMOWLight::model() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWLight.model)
  return model_ != NULL ? *model_ : *default_instance_->model_;
}
inline ::PbMOWGraphics::PbMOWModel* PbMOWLight::mutable_model() {
  set_has_model();
  if (model_ == NULL) model_ = new ::PbMOWGraphics::PbMOWModel;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWLight.model)
  return model_;
}
inline ::PbMOWGraphics::PbMOWModel* PbMOWLight::release_model() {
  clear_has_model();
  ::PbMOWGraphics::PbMOWModel* temp = model_;
  model_ = NULL;
  return temp;
}
inline void PbMOWLight::set_allocated_model(::PbMOWGraphics::PbMOWModel* model) {
  delete model_;
  model_ = model;
  if (model) {
    set_has_model();
  } else {
    clear_has_model();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWLight.model)
}

// -------------------------------------------------------------------

// PbMOWVertex

// optional .PbMOWCommon.PbMOWVector3 position = 1;
inline bool PbMOWVertex::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbMOWVertex::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbMOWVertex::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbMOWVertex::clear_position() {
  if (position_ != NULL) position_->::PbMOWCommon::PbMOWVector3::Clear();
  clear_has_position();
}
inline const ::PbMOWCommon::PbMOWVector3& PbMOWVertex::position() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWVertex.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWVertex::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::PbMOWCommon::PbMOWVector3;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWVertex.position)
  return position_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWVertex::release_position() {
  clear_has_position();
  ::PbMOWCommon::PbMOWVector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void PbMOWVertex::set_allocated_position(::PbMOWCommon::PbMOWVector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWVertex.position)
}

// optional .PbMOWCommon.PbMOWVector3 texture = 2;
inline bool PbMOWVertex::has_texture() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbMOWVertex::set_has_texture() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbMOWVertex::clear_has_texture() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbMOWVertex::clear_texture() {
  if (texture_ != NULL) texture_->::PbMOWCommon::PbMOWVector3::Clear();
  clear_has_texture();
}
inline const ::PbMOWCommon::PbMOWVector3& PbMOWVertex::texture() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWVertex.texture)
  return texture_ != NULL ? *texture_ : *default_instance_->texture_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWVertex::mutable_texture() {
  set_has_texture();
  if (texture_ == NULL) texture_ = new ::PbMOWCommon::PbMOWVector3;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWVertex.texture)
  return texture_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWVertex::release_texture() {
  clear_has_texture();
  ::PbMOWCommon::PbMOWVector3* temp = texture_;
  texture_ = NULL;
  return temp;
}
inline void PbMOWVertex::set_allocated_texture(::PbMOWCommon::PbMOWVector3* texture) {
  delete texture_;
  texture_ = texture;
  if (texture) {
    set_has_texture();
  } else {
    clear_has_texture();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWVertex.texture)
}

// optional .PbMOWCommon.PbMOWVector3 normal = 3;
inline bool PbMOWVertex::has_normal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbMOWVertex::set_has_normal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbMOWVertex::clear_has_normal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbMOWVertex::clear_normal() {
  if (normal_ != NULL) normal_->::PbMOWCommon::PbMOWVector3::Clear();
  clear_has_normal();
}
inline const ::PbMOWCommon::PbMOWVector3& PbMOWVertex::normal() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWVertex.normal)
  return normal_ != NULL ? *normal_ : *default_instance_->normal_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWVertex::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) normal_ = new ::PbMOWCommon::PbMOWVector3;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWVertex.normal)
  return normal_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWVertex::release_normal() {
  clear_has_normal();
  ::PbMOWCommon::PbMOWVector3* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline void PbMOWVertex::set_allocated_normal(::PbMOWCommon::PbMOWVector3* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWVertex.normal)
}

// optional .PbMOWCommon.PbMOWVector4 color = 4;
inline bool PbMOWVertex::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbMOWVertex::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbMOWVertex::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbMOWVertex::clear_color() {
  if (color_ != NULL) color_->::PbMOWCommon::PbMOWVector4::Clear();
  clear_has_color();
}
inline const ::PbMOWCommon::PbMOWVector4& PbMOWVertex::color() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWVertex.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
inline ::PbMOWCommon::PbMOWVector4* PbMOWVertex::mutable_color() {
  set_has_color();
  if (color_ == NULL) color_ = new ::PbMOWCommon::PbMOWVector4;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWVertex.color)
  return color_;
}
inline ::PbMOWCommon::PbMOWVector4* PbMOWVertex::release_color() {
  clear_has_color();
  ::PbMOWCommon::PbMOWVector4* temp = color_;
  color_ = NULL;
  return temp;
}
inline void PbMOWVertex::set_allocated_color(::PbMOWCommon::PbMOWVector4* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWVertex.color)
}

// -------------------------------------------------------------------

// PbMOWFace

// repeated int32 indices = 1;
inline int PbMOWFace::indices_size() const {
  return indices_.size();
}
inline void PbMOWFace::clear_indices() {
  indices_.Clear();
}
inline ::google::protobuf::int32 PbMOWFace::indices(int index) const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWFace.indices)
  return indices_.Get(index);
}
inline void PbMOWFace::set_indices(int index, ::google::protobuf::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:PbMOWGraphics.PbMOWFace.indices)
}
inline void PbMOWFace::add_indices(::google::protobuf::int32 value) {
  indices_.Add(value);
  // @@protoc_insertion_point(field_add:PbMOWGraphics.PbMOWFace.indices)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PbMOWFace::indices() const {
  // @@protoc_insertion_point(field_list:PbMOWGraphics.PbMOWFace.indices)
  return indices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PbMOWFace::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:PbMOWGraphics.PbMOWFace.indices)
  return &indices_;
}

// -------------------------------------------------------------------

// PbMOWModelPart

// repeated .PbMOWGraphics.PbMOWVertex vertices = 1;
inline int PbMOWModelPart::vertices_size() const {
  return vertices_.size();
}
inline void PbMOWModelPart::clear_vertices() {
  vertices_.Clear();
}
inline const ::PbMOWGraphics::PbMOWVertex& PbMOWModelPart::vertices(int index) const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWModelPart.vertices)
  return vertices_.Get(index);
}
inline ::PbMOWGraphics::PbMOWVertex* PbMOWModelPart::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWModelPart.vertices)
  return vertices_.Mutable(index);
}
inline ::PbMOWGraphics::PbMOWVertex* PbMOWModelPart::add_vertices() {
  // @@protoc_insertion_point(field_add:PbMOWGraphics.PbMOWModelPart.vertices)
  return vertices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWVertex >&
PbMOWModelPart::vertices() const {
  // @@protoc_insertion_point(field_list:PbMOWGraphics.PbMOWModelPart.vertices)
  return vertices_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWVertex >*
PbMOWModelPart::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:PbMOWGraphics.PbMOWModelPart.vertices)
  return &vertices_;
}

// repeated .PbMOWGraphics.PbMOWFace faces = 2;
inline int PbMOWModelPart::faces_size() const {
  return faces_.size();
}
inline void PbMOWModelPart::clear_faces() {
  faces_.Clear();
}
inline const ::PbMOWGraphics::PbMOWFace& PbMOWModelPart::faces(int index) const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWModelPart.faces)
  return faces_.Get(index);
}
inline ::PbMOWGraphics::PbMOWFace* PbMOWModelPart::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWModelPart.faces)
  return faces_.Mutable(index);
}
inline ::PbMOWGraphics::PbMOWFace* PbMOWModelPart::add_faces() {
  // @@protoc_insertion_point(field_add:PbMOWGraphics.PbMOWModelPart.faces)
  return faces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWFace >&
PbMOWModelPart::faces() const {
  // @@protoc_insertion_point(field_list:PbMOWGraphics.PbMOWModelPart.faces)
  return faces_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWFace >*
PbMOWModelPart::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:PbMOWGraphics.PbMOWModelPart.faces)
  return &faces_;
}

// optional string name = 3;
inline bool PbMOWModelPart::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbMOWModelPart::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbMOWModelPart::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbMOWModelPart::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PbMOWModelPart::name() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWModelPart.name)
  return *name_;
}
inline void PbMOWModelPart::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:PbMOWGraphics.PbMOWModelPart.name)
}
inline void PbMOWModelPart::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbMOWGraphics.PbMOWModelPart.name)
}
inline void PbMOWModelPart::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbMOWGraphics.PbMOWModelPart.name)
}
inline ::std::string* PbMOWModelPart::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWModelPart.name)
  return name_;
}
inline ::std::string* PbMOWModelPart::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbMOWModelPart::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWModelPart.name)
}

// optional string materialName = 4;
inline bool PbMOWModelPart::has_materialname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbMOWModelPart::set_has_materialname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbMOWModelPart::clear_has_materialname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbMOWModelPart::clear_materialname() {
  if (materialname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    materialname_->clear();
  }
  clear_has_materialname();
}
inline const ::std::string& PbMOWModelPart::materialname() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWModelPart.materialName)
  return *materialname_;
}
inline void PbMOWModelPart::set_materialname(const ::std::string& value) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(value);
  // @@protoc_insertion_point(field_set:PbMOWGraphics.PbMOWModelPart.materialName)
}
inline void PbMOWModelPart::set_materialname(const char* value) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbMOWGraphics.PbMOWModelPart.materialName)
}
inline void PbMOWModelPart::set_materialname(const char* value, size_t size) {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    materialname_ = new ::std::string;
  }
  materialname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbMOWGraphics.PbMOWModelPart.materialName)
}
inline ::std::string* PbMOWModelPart::mutable_materialname() {
  set_has_materialname();
  if (materialname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    materialname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWModelPart.materialName)
  return materialname_;
}
inline ::std::string* PbMOWModelPart::release_materialname() {
  clear_has_materialname();
  if (materialname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = materialname_;
    materialname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbMOWModelPart::set_allocated_materialname(::std::string* materialname) {
  if (materialname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete materialname_;
  }
  if (materialname) {
    set_has_materialname();
    materialname_ = materialname;
  } else {
    clear_has_materialname();
    materialname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWModelPart.materialName)
}

// -------------------------------------------------------------------

// PbMOWBoundingSphere

// optional .PbMOWCommon.PbMOWVector3 center = 1;
inline bool PbMOWBoundingSphere::has_center() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbMOWBoundingSphere::set_has_center() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbMOWBoundingSphere::clear_has_center() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbMOWBoundingSphere::clear_center() {
  if (center_ != NULL) center_->::PbMOWCommon::PbMOWVector3::Clear();
  clear_has_center();
}
inline const ::PbMOWCommon::PbMOWVector3& PbMOWBoundingSphere::center() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWBoundingSphere.center)
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWBoundingSphere::mutable_center() {
  set_has_center();
  if (center_ == NULL) center_ = new ::PbMOWCommon::PbMOWVector3;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWBoundingSphere.center)
  return center_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWBoundingSphere::release_center() {
  clear_has_center();
  ::PbMOWCommon::PbMOWVector3* temp = center_;
  center_ = NULL;
  return temp;
}
inline void PbMOWBoundingSphere::set_allocated_center(::PbMOWCommon::PbMOWVector3* center) {
  delete center_;
  center_ = center;
  if (center) {
    set_has_center();
  } else {
    clear_has_center();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWBoundingSphere.center)
}

// optional float radius = 2;
inline bool PbMOWBoundingSphere::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbMOWBoundingSphere::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbMOWBoundingSphere::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbMOWBoundingSphere::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float PbMOWBoundingSphere::radius() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWBoundingSphere.radius)
  return radius_;
}
inline void PbMOWBoundingSphere::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:PbMOWGraphics.PbMOWBoundingSphere.radius)
}

// -------------------------------------------------------------------

// PbMOWBoundingBox

// optional string name = 1;
inline bool PbMOWBoundingBox::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbMOWBoundingBox::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbMOWBoundingBox::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbMOWBoundingBox::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PbMOWBoundingBox::name() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWBoundingBox.name)
  return *name_;
}
inline void PbMOWBoundingBox::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:PbMOWGraphics.PbMOWBoundingBox.name)
}
inline void PbMOWBoundingBox::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbMOWGraphics.PbMOWBoundingBox.name)
}
inline void PbMOWBoundingBox::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbMOWGraphics.PbMOWBoundingBox.name)
}
inline ::std::string* PbMOWBoundingBox::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWBoundingBox.name)
  return name_;
}
inline ::std::string* PbMOWBoundingBox::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbMOWBoundingBox::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWBoundingBox.name)
}

// optional .PbMOWGraphics.PbMOWModelPart part = 2;
inline bool PbMOWBoundingBox::has_part() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbMOWBoundingBox::set_has_part() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbMOWBoundingBox::clear_has_part() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbMOWBoundingBox::clear_part() {
  if (part_ != NULL) part_->::PbMOWGraphics::PbMOWModelPart::Clear();
  clear_has_part();
}
inline const ::PbMOWGraphics::PbMOWModelPart& PbMOWBoundingBox::part() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWBoundingBox.part)
  return part_ != NULL ? *part_ : *default_instance_->part_;
}
inline ::PbMOWGraphics::PbMOWModelPart* PbMOWBoundingBox::mutable_part() {
  set_has_part();
  if (part_ == NULL) part_ = new ::PbMOWGraphics::PbMOWModelPart;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWBoundingBox.part)
  return part_;
}
inline ::PbMOWGraphics::PbMOWModelPart* PbMOWBoundingBox::release_part() {
  clear_has_part();
  ::PbMOWGraphics::PbMOWModelPart* temp = part_;
  part_ = NULL;
  return temp;
}
inline void PbMOWBoundingBox::set_allocated_part(::PbMOWGraphics::PbMOWModelPart* part) {
  delete part_;
  part_ = part;
  if (part) {
    set_has_part();
  } else {
    clear_has_part();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWBoundingBox.part)
}

// optional .PbMOWCommon.PbMOWVector3 widthHeightDepth = 3;
inline bool PbMOWBoundingBox::has_widthheightdepth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbMOWBoundingBox::set_has_widthheightdepth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbMOWBoundingBox::clear_has_widthheightdepth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbMOWBoundingBox::clear_widthheightdepth() {
  if (widthheightdepth_ != NULL) widthheightdepth_->::PbMOWCommon::PbMOWVector3::Clear();
  clear_has_widthheightdepth();
}
inline const ::PbMOWCommon::PbMOWVector3& PbMOWBoundingBox::widthheightdepth() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWBoundingBox.widthHeightDepth)
  return widthheightdepth_ != NULL ? *widthheightdepth_ : *default_instance_->widthheightdepth_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWBoundingBox::mutable_widthheightdepth() {
  set_has_widthheightdepth();
  if (widthheightdepth_ == NULL) widthheightdepth_ = new ::PbMOWCommon::PbMOWVector3;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWBoundingBox.widthHeightDepth)
  return widthheightdepth_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWBoundingBox::release_widthheightdepth() {
  clear_has_widthheightdepth();
  ::PbMOWCommon::PbMOWVector3* temp = widthheightdepth_;
  widthheightdepth_ = NULL;
  return temp;
}
inline void PbMOWBoundingBox::set_allocated_widthheightdepth(::PbMOWCommon::PbMOWVector3* widthheightdepth) {
  delete widthheightdepth_;
  widthheightdepth_ = widthheightdepth;
  if (widthheightdepth) {
    set_has_widthheightdepth();
  } else {
    clear_has_widthheightdepth();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWBoundingBox.widthHeightDepth)
}

// -------------------------------------------------------------------

// PbMOWModel

// repeated .PbMOWGraphics.PbMOWModelPart parts = 1;
inline int PbMOWModel::parts_size() const {
  return parts_.size();
}
inline void PbMOWModel::clear_parts() {
  parts_.Clear();
}
inline const ::PbMOWGraphics::PbMOWModelPart& PbMOWModel::parts(int index) const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWModel.parts)
  return parts_.Get(index);
}
inline ::PbMOWGraphics::PbMOWModelPart* PbMOWModel::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWModel.parts)
  return parts_.Mutable(index);
}
inline ::PbMOWGraphics::PbMOWModelPart* PbMOWModel::add_parts() {
  // @@protoc_insertion_point(field_add:PbMOWGraphics.PbMOWModel.parts)
  return parts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModelPart >&
PbMOWModel::parts() const {
  // @@protoc_insertion_point(field_list:PbMOWGraphics.PbMOWModel.parts)
  return parts_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModelPart >*
PbMOWModel::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:PbMOWGraphics.PbMOWModel.parts)
  return &parts_;
}

// optional string name = 2;
inline bool PbMOWModel::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbMOWModel::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbMOWModel::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbMOWModel::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PbMOWModel::name() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWModel.name)
  return *name_;
}
inline void PbMOWModel::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:PbMOWGraphics.PbMOWModel.name)
}
inline void PbMOWModel::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbMOWGraphics.PbMOWModel.name)
}
inline void PbMOWModel::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbMOWGraphics.PbMOWModel.name)
}
inline ::std::string* PbMOWModel::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWModel.name)
  return name_;
}
inline ::std::string* PbMOWModel::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbMOWModel::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWModel.name)
}

// optional .PbMOWGraphics.PbMOWBoundingShape boundingShape = 3;
inline bool PbMOWModel::has_boundingshape() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbMOWModel::set_has_boundingshape() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbMOWModel::clear_has_boundingshape() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbMOWModel::clear_boundingshape() {
  boundingshape_ = 0;
  clear_has_boundingshape();
}
inline ::PbMOWGraphics::PbMOWBoundingShape PbMOWModel::boundingshape() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWModel.boundingShape)
  return static_cast< ::PbMOWGraphics::PbMOWBoundingShape >(boundingshape_);
}
inline void PbMOWModel::set_boundingshape(::PbMOWGraphics::PbMOWBoundingShape value) {
  assert(::PbMOWGraphics::PbMOWBoundingShape_IsValid(value));
  set_has_boundingshape();
  boundingshape_ = value;
  // @@protoc_insertion_point(field_set:PbMOWGraphics.PbMOWModel.boundingShape)
}

// optional .PbMOWGraphics.PbMOWBoundingBox boundingBox = 4;
inline bool PbMOWModel::has_boundingbox() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbMOWModel::set_has_boundingbox() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbMOWModel::clear_has_boundingbox() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbMOWModel::clear_boundingbox() {
  if (boundingbox_ != NULL) boundingbox_->::PbMOWGraphics::PbMOWBoundingBox::Clear();
  clear_has_boundingbox();
}
inline const ::PbMOWGraphics::PbMOWBoundingBox& PbMOWModel::boundingbox() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWModel.boundingBox)
  return boundingbox_ != NULL ? *boundingbox_ : *default_instance_->boundingbox_;
}
inline ::PbMOWGraphics::PbMOWBoundingBox* PbMOWModel::mutable_boundingbox() {
  set_has_boundingbox();
  if (boundingbox_ == NULL) boundingbox_ = new ::PbMOWGraphics::PbMOWBoundingBox;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWModel.boundingBox)
  return boundingbox_;
}
inline ::PbMOWGraphics::PbMOWBoundingBox* PbMOWModel::release_boundingbox() {
  clear_has_boundingbox();
  ::PbMOWGraphics::PbMOWBoundingBox* temp = boundingbox_;
  boundingbox_ = NULL;
  return temp;
}
inline void PbMOWModel::set_allocated_boundingbox(::PbMOWGraphics::PbMOWBoundingBox* boundingbox) {
  delete boundingbox_;
  boundingbox_ = boundingbox;
  if (boundingbox) {
    set_has_boundingbox();
  } else {
    clear_has_boundingbox();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWModel.boundingBox)
}

// optional .PbMOWGraphics.PbMOWBoundingSphere boundingSphere = 5;
inline bool PbMOWModel::has_boundingsphere() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PbMOWModel::set_has_boundingsphere() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PbMOWModel::clear_has_boundingsphere() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PbMOWModel::clear_boundingsphere() {
  if (boundingsphere_ != NULL) boundingsphere_->::PbMOWGraphics::PbMOWBoundingSphere::Clear();
  clear_has_boundingsphere();
}
inline const ::PbMOWGraphics::PbMOWBoundingSphere& PbMOWModel::boundingsphere() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWModel.boundingSphere)
  return boundingsphere_ != NULL ? *boundingsphere_ : *default_instance_->boundingsphere_;
}
inline ::PbMOWGraphics::PbMOWBoundingSphere* PbMOWModel::mutable_boundingsphere() {
  set_has_boundingsphere();
  if (boundingsphere_ == NULL) boundingsphere_ = new ::PbMOWGraphics::PbMOWBoundingSphere;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWModel.boundingSphere)
  return boundingsphere_;
}
inline ::PbMOWGraphics::PbMOWBoundingSphere* PbMOWModel::release_boundingsphere() {
  clear_has_boundingsphere();
  ::PbMOWGraphics::PbMOWBoundingSphere* temp = boundingsphere_;
  boundingsphere_ = NULL;
  return temp;
}
inline void PbMOWModel::set_allocated_boundingsphere(::PbMOWGraphics::PbMOWBoundingSphere* boundingsphere) {
  delete boundingsphere_;
  boundingsphere_ = boundingsphere;
  if (boundingsphere) {
    set_has_boundingsphere();
  } else {
    clear_has_boundingsphere();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWModel.boundingSphere)
}

// optional bytes physicalEntity = 6;
inline bool PbMOWModel::has_physicalentity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PbMOWModel::set_has_physicalentity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PbMOWModel::clear_has_physicalentity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PbMOWModel::clear_physicalentity() {
  if (physicalentity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    physicalentity_->clear();
  }
  clear_has_physicalentity();
}
inline const ::std::string& PbMOWModel::physicalentity() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWModel.physicalEntity)
  return *physicalentity_;
}
inline void PbMOWModel::set_physicalentity(const ::std::string& value) {
  set_has_physicalentity();
  if (physicalentity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    physicalentity_ = new ::std::string;
  }
  physicalentity_->assign(value);
  // @@protoc_insertion_point(field_set:PbMOWGraphics.PbMOWModel.physicalEntity)
}
inline void PbMOWModel::set_physicalentity(const char* value) {
  set_has_physicalentity();
  if (physicalentity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    physicalentity_ = new ::std::string;
  }
  physicalentity_->assign(value);
  // @@protoc_insertion_point(field_set_char:PbMOWGraphics.PbMOWModel.physicalEntity)
}
inline void PbMOWModel::set_physicalentity(const void* value, size_t size) {
  set_has_physicalentity();
  if (physicalentity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    physicalentity_ = new ::std::string;
  }
  physicalentity_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PbMOWGraphics.PbMOWModel.physicalEntity)
}
inline ::std::string* PbMOWModel::mutable_physicalentity() {
  set_has_physicalentity();
  if (physicalentity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    physicalentity_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWModel.physicalEntity)
  return physicalentity_;
}
inline ::std::string* PbMOWModel::release_physicalentity() {
  clear_has_physicalentity();
  if (physicalentity_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = physicalentity_;
    physicalentity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PbMOWModel::set_allocated_physicalentity(::std::string* physicalentity) {
  if (physicalentity_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete physicalentity_;
  }
  if (physicalentity) {
    set_has_physicalentity();
    physicalentity_ = physicalentity;
  } else {
    clear_has_physicalentity();
    physicalentity_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWModel.physicalEntity)
}

// optional .PbMOWCommon.PbMOWVector3 scale = 7;
inline bool PbMOWModel::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PbMOWModel::set_has_scale() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PbMOWModel::clear_has_scale() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PbMOWModel::clear_scale() {
  if (scale_ != NULL) scale_->::PbMOWCommon::PbMOWVector3::Clear();
  clear_has_scale();
}
inline const ::PbMOWCommon::PbMOWVector3& PbMOWModel::scale() const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWModel.scale)
  return scale_ != NULL ? *scale_ : *default_instance_->scale_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWModel::mutable_scale() {
  set_has_scale();
  if (scale_ == NULL) scale_ = new ::PbMOWCommon::PbMOWVector3;
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWModel.scale)
  return scale_;
}
inline ::PbMOWCommon::PbMOWVector3* PbMOWModel::release_scale() {
  clear_has_scale();
  ::PbMOWCommon::PbMOWVector3* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline void PbMOWModel::set_allocated_scale(::PbMOWCommon::PbMOWVector3* scale) {
  delete scale_;
  scale_ = scale;
  if (scale) {
    set_has_scale();
  } else {
    clear_has_scale();
  }
  // @@protoc_insertion_point(field_set_allocated:PbMOWGraphics.PbMOWModel.scale)
}

// -------------------------------------------------------------------

// PbMOWScene

// repeated .PbMOWGraphics.PbMOWModel fixedModels = 1;
inline int PbMOWScene::fixedmodels_size() const {
  return fixedmodels_.size();
}
inline void PbMOWScene::clear_fixedmodels() {
  fixedmodels_.Clear();
}
inline const ::PbMOWGraphics::PbMOWModel& PbMOWScene::fixedmodels(int index) const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWScene.fixedModels)
  return fixedmodels_.Get(index);
}
inline ::PbMOWGraphics::PbMOWModel* PbMOWScene::mutable_fixedmodels(int index) {
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWScene.fixedModels)
  return fixedmodels_.Mutable(index);
}
inline ::PbMOWGraphics::PbMOWModel* PbMOWScene::add_fixedmodels() {
  // @@protoc_insertion_point(field_add:PbMOWGraphics.PbMOWScene.fixedModels)
  return fixedmodels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >&
PbMOWScene::fixedmodels() const {
  // @@protoc_insertion_point(field_list:PbMOWGraphics.PbMOWScene.fixedModels)
  return fixedmodels_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >*
PbMOWScene::mutable_fixedmodels() {
  // @@protoc_insertion_point(field_mutable_list:PbMOWGraphics.PbMOWScene.fixedModels)
  return &fixedmodels_;
}

// repeated .PbMOWGraphics.PbMOWModel dynamicModels = 2;
inline int PbMOWScene::dynamicmodels_size() const {
  return dynamicmodels_.size();
}
inline void PbMOWScene::clear_dynamicmodels() {
  dynamicmodels_.Clear();
}
inline const ::PbMOWGraphics::PbMOWModel& PbMOWScene::dynamicmodels(int index) const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWScene.dynamicModels)
  return dynamicmodels_.Get(index);
}
inline ::PbMOWGraphics::PbMOWModel* PbMOWScene::mutable_dynamicmodels(int index) {
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWScene.dynamicModels)
  return dynamicmodels_.Mutable(index);
}
inline ::PbMOWGraphics::PbMOWModel* PbMOWScene::add_dynamicmodels() {
  // @@protoc_insertion_point(field_add:PbMOWGraphics.PbMOWScene.dynamicModels)
  return dynamicmodels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >&
PbMOWScene::dynamicmodels() const {
  // @@protoc_insertion_point(field_list:PbMOWGraphics.PbMOWScene.dynamicModels)
  return dynamicmodels_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >*
PbMOWScene::mutable_dynamicmodels() {
  // @@protoc_insertion_point(field_mutable_list:PbMOWGraphics.PbMOWScene.dynamicModels)
  return &dynamicmodels_;
}

// repeated .PbMOWGraphics.PbMOWModel cameras = 3;
inline int PbMOWScene::cameras_size() const {
  return cameras_.size();
}
inline void PbMOWScene::clear_cameras() {
  cameras_.Clear();
}
inline const ::PbMOWGraphics::PbMOWModel& PbMOWScene::cameras(int index) const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWScene.cameras)
  return cameras_.Get(index);
}
inline ::PbMOWGraphics::PbMOWModel* PbMOWScene::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWScene.cameras)
  return cameras_.Mutable(index);
}
inline ::PbMOWGraphics::PbMOWModel* PbMOWScene::add_cameras() {
  // @@protoc_insertion_point(field_add:PbMOWGraphics.PbMOWScene.cameras)
  return cameras_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >&
PbMOWScene::cameras() const {
  // @@protoc_insertion_point(field_list:PbMOWGraphics.PbMOWScene.cameras)
  return cameras_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWModel >*
PbMOWScene::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:PbMOWGraphics.PbMOWScene.cameras)
  return &cameras_;
}

// repeated .PbMOWGraphics.PbMOWLight lights = 4;
inline int PbMOWScene::lights_size() const {
  return lights_.size();
}
inline void PbMOWScene::clear_lights() {
  lights_.Clear();
}
inline const ::PbMOWGraphics::PbMOWLight& PbMOWScene::lights(int index) const {
  // @@protoc_insertion_point(field_get:PbMOWGraphics.PbMOWScene.lights)
  return lights_.Get(index);
}
inline ::PbMOWGraphics::PbMOWLight* PbMOWScene::mutable_lights(int index) {
  // @@protoc_insertion_point(field_mutable:PbMOWGraphics.PbMOWScene.lights)
  return lights_.Mutable(index);
}
inline ::PbMOWGraphics::PbMOWLight* PbMOWScene::add_lights() {
  // @@protoc_insertion_point(field_add:PbMOWGraphics.PbMOWScene.lights)
  return lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWLight >&
PbMOWScene::lights() const {
  // @@protoc_insertion_point(field_list:PbMOWGraphics.PbMOWScene.lights)
  return lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::PbMOWGraphics::PbMOWLight >*
PbMOWScene::mutable_lights() {
  // @@protoc_insertion_point(field_mutable_list:PbMOWGraphics.PbMOWScene.lights)
  return &lights_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PbMOWGraphics

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::PbMOWGraphics::PbMOWLight_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PbMOWGraphics::PbMOWLight_Type>() {
  return ::PbMOWGraphics::PbMOWLight_Type_descriptor();
}
template <> struct is_proto_enum< ::PbMOWGraphics::PbMOWBoundingShape> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PbMOWGraphics::PbMOWBoundingShape>() {
  return ::PbMOWGraphics::PbMOWBoundingShape_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MOWGraphics_2eproto__INCLUDED
